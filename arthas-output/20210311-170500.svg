<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1477"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1477"> </text>
<g id="frames">
<g>
<title>all (504 samples, 100.00%)</title><rect x="10.0" y="1443.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1454.0">all</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.60%)</title><rect x="10.0" y="1427.0" width="7.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>Interpreter (3 samples, 0.60%)</title><rect x="10.0" y="1411.0" width="7.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>java/lang/Thread.run (119 samples, 23.61%)</title><rect x="17.0" y="1427.0" width="278.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.0" y="1438.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocalRunnable.run (10 samples, 1.98%)</title><rect x="17.0" y="1411.0" width="23.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="1422.0">c..</text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/ThreadExecutorMap$2.run (10 samples, 1.98%)</title><rect x="17.0" y="1395.0" width="23.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.0" y="1406.0">c..</text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/SingleThreadEventExecutor$4.run (10 samples, 1.98%)</title><rect x="17.0" y="1379.0" width="23.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.0" y="1390.0">c..</text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.run (10 samples, 1.98%)</title><rect x="17.0" y="1363.0" width="23.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.0" y="1374.0">c..</text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKeys (9 samples, 1.79%)</title><rect x="17.0" y="1347.0" width="21.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.0" y="1358.0">c..</text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (9 samples, 1.79%)</title><rect x="17.0" y="1331.0" width="21.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.0" y="1342.0">c..</text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKey (9 samples, 1.79%)</title><rect x="17.0" y="1315.0" width="21.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.0" y="1326.0">c..</text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (9 samples, 1.79%)</title><rect x="17.0" y="1299.0" width="21.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="1310.0">c..</text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline.fireChannelRead (8 samples, 1.59%)</title><rect x="17.0" y="1283.0" width="18.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.0" y="1294.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (8 samples, 1.59%)</title><rect x="17.0" y="1267.0" width="18.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.0" y="1278.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (8 samples, 1.59%)</title><rect x="17.0" y="1251.0" width="18.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.0" y="1262.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (7 samples, 1.39%)</title><rect x="17.0" y="1235.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="1246.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1219.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.0" y="1230.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1203.0" width="16.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.0" y="1214.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1187.0" width="16.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.0" y="1198.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/ByteToMessageDecoder.channelRead (7 samples, 1.39%)</title><rect x="17.0" y="1171.0" width="16.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.0" y="1182.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/ByteToMessageDecoder.fireChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1155.0" width="16.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1139.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.0" y="1150.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1123.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.0" y="1134.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1107.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="1118.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/http/BasicHttpAuthenticatorHandler.channelRead (7 samples, 1.39%)</title><rect x="17.0" y="1091.0" width="16.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.0" y="1102.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1075.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="1086.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1059.0" width="16.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.0" y="1070.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="1043.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.0" y="1054.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/websocketx/Utf8FrameValidator.channelRead (7 samples, 1.39%)</title><rect x="17.0" y="1027.0" width="16.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="1038.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/ChannelInboundHandlerAdapter.channelRead (7 samples, 1.39%)</title><rect x="17.0" y="1011.0" width="16.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.0" y="1022.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="995.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="1006.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="979.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="990.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="963.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.0" y="974.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/MessageToMessageDecoder.channelRead (7 samples, 1.39%)</title><rect x="17.0" y="947.0" width="16.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.0" y="958.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="931.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="942.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="915.0" width="16.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.0" y="926.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="899.0" width="16.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="910.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/timeout/IdleStateHandler.channelRead (7 samples, 1.39%)</title><rect x="17.0" y="883.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="894.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="867.0" width="16.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="878.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="851.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.0" y="862.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (7 samples, 1.39%)</title><rect x="17.0" y="835.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.0" y="846.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/SimpleChannelInboundHandler.channelRead (7 samples, 1.39%)</title><rect x="17.0" y="819.0" width="16.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="830.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.channelRead0 (7 samples, 1.39%)</title><rect x="17.0" y="803.0" width="16.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.0" y="814.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.channelRead0 (7 samples, 1.39%)</title><rect x="17.0" y="787.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="798.0"></text>
</g>
<g>
<title>io/termd/core/http/HttpTtyConnection.writeToDecoder (7 samples, 1.39%)</title><rect x="17.0" y="771.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (4 samples, 0.79%)</title><rect x="17.0" y="755.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 0.79%)</title><rect x="17.0" y="739.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.79%)</title><rect x="17.0" y="723.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.findRootValueDeserializer (4 samples, 0.79%)</title><rect x="17.0" y="707.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.handleSecondaryContextualization (3 samples, 0.60%)</title><rect x="17.0" y="691.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/MapDeserializer.createContextual (3 samples, 0.60%)</title><rect x="17.0" y="675.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.findContextualValueDeserializer (3 samples, 0.60%)</title><rect x="17.0" y="659.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache.findValueDeserializer (3 samples, 0.60%)</title><rect x="17.0" y="643.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache._createAndCacheValueDeserializer (3 samples, 0.60%)</title><rect x="17.0" y="627.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache._createAndCache2 (3 samples, 0.60%)</title><rect x="17.0" y="611.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.resolve (3 samples, 0.60%)</title><rect x="17.0" y="595.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer._findCustomDeser (3 samples, 0.60%)</title><rect x="17.0" y="579.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.findNonContextualValueDeserializer (3 samples, 0.60%)</title><rect x="17.0" y="563.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache.findValueDeserializer (3 samples, 0.60%)</title><rect x="17.0" y="547.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache._createAndCacheValueDeserializer (3 samples, 0.60%)</title><rect x="17.0" y="531.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache._createAndCache2 (3 samples, 0.60%)</title><rect x="17.0" y="515.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache._createDeserializer (3 samples, 0.60%)</title><rect x="17.0" y="499.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache._createDeserializer2 (3 samples, 0.60%)</title><rect x="17.0" y="483.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.createCollectionDeserializer (1 samples, 0.20%)</title><rect x="17.0" y="467.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.findValueInstantiator (1 samples, 0.20%)</title><rect x="17.0" y="451.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory._constructDefaultValueInstantiator (1 samples, 0.20%)</title><rect x="17.0" y="435.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory._addDeserializerConstructors (1 samples, 0.20%)</title><rect x="17.0" y="419.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory._checkIfCreatorPropertyBased (1 samples, 0.20%)</title><rect x="17.0" y="403.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.getParameter (1 samples, 0.20%)</title><rect x="17.0" y="387.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.getParameterType (1 samples, 0.20%)</title><rect x="17.0" y="371.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClass.resolveType (1 samples, 0.20%)</title><rect x="17.0" y="355.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.20%)</title><rect x="17.0" y="339.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.20%)</title><rect x="17.0" y="323.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromParamType (1 samples, 0.20%)</title><rect x="17.0" y="307.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.20%)</title><rect x="17.0" y="291.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromWildcard (1 samples, 0.20%)</title><rect x="17.0" y="275.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.0" y="286.0"></text>
</g>
<g>
<title>sun/reflect/generics/reflectiveObjects/WildcardTypeImpl.getUpperBounds (1 samples, 0.20%)</title><rect x="17.0" y="259.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.0" y="270.0"></text>
</g>
<g>
<title>sun/reflect/generics/tree/TypeVariableSignature.accept (1 samples, 0.20%)</title><rect x="17.0" y="243.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.0" y="254.0"></text>
</g>
<g>
<title>sun/reflect/generics/visitor/Reifier.visitTypeVariableSignature (1 samples, 0.20%)</title><rect x="17.0" y="227.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="238.0"></text>
</g>
<g>
<title>sun/reflect/generics/factory/CoreReflectionFactory.findTypeVariable (1 samples, 0.20%)</title><rect x="17.0" y="211.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="222.0"></text>
</g>
<g>
<title>sun/reflect/generics/scope/AbstractScope.lookup (1 samples, 0.20%)</title><rect x="17.0" y="195.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.0" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.getTypeParameters (1 samples, 0.20%)</title><rect x="17.0" y="179.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.0" y="190.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.getGenericInfo (1 samples, 0.20%)</title><rect x="17.0" y="163.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.0" y="174.0"></text>
</g>
<g>
<title>sun/reflect/generics/repository/ConstructorRepository.make (1 samples, 0.20%)</title><rect x="17.0" y="147.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.0" y="158.0"></text>
</g>
<g>
<title>sun/reflect/generics/repository/ConstructorRepository.&lt;init&gt; (1 samples, 0.20%)</title><rect x="17.0" y="131.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="142.0"></text>
</g>
<g>
<title>sun/reflect/generics/repository/GenericDeclRepository.&lt;init&gt; (1 samples, 0.20%)</title><rect x="17.0" y="115.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="126.0"></text>
</g>
<g>
<title>sun/reflect/generics/repository/AbstractRepository.&lt;init&gt; (1 samples, 0.20%)</title><rect x="17.0" y="99.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="110.0"></text>
</g>
<g>
<title>sun/reflect/generics/repository/ConstructorRepository.parse (1 samples, 0.20%)</title><rect x="17.0" y="83.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.0" y="94.0"></text>
</g>
<g>
<title>sun/reflect/generics/repository/ConstructorRepository.parse (1 samples, 0.20%)</title><rect x="17.0" y="67.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="78.0"></text>
</g>
<g>
<title>sun/reflect/generics/parser/SignatureParser.parseMethodSig (1 samples, 0.20%)</title><rect x="17.0" y="51.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="62.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.createMapDeserializer (2 samples, 0.40%)</title><rect x="19.4" y="467.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.findValueInstantiator (2 samples, 0.40%)</title><rect x="19.4" y="451.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory._constructDefaultValueInstantiator (2 samples, 0.40%)</title><rect x="19.4" y="435.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory._addDeserializerConstructors (2 samples, 0.40%)</title><rect x="19.4" y="419.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory._checkIfCreatorPropertyBased (1 samples, 0.20%)</title><rect x="19.4" y="403.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.getParameter (1 samples, 0.20%)</title><rect x="19.4" y="387.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.getParameterType (1 samples, 0.20%)</title><rect x="19.4" y="371.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.4" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.getGenericParameterTypes (1 samples, 0.20%)</title><rect x="19.4" y="355.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.4" y="366.0"></text>
</g>
<g>
<title>java/lang/reflect/Executable.getGenericParameterTypes (1 samples, 0.20%)</title><rect x="19.4" y="339.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.4" y="350.0"></text>
</g>
<g>
<title>sun/reflect/generics/repository/ConstructorRepository.getParameterTypes (1 samples, 0.20%)</title><rect x="19.4" y="323.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.4" y="334.0"></text>
</g>
<g>
<title>sun/reflect/generics/tree/ClassTypeSignature.accept (1 samples, 0.20%)</title><rect x="19.4" y="307.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.4" y="318.0"></text>
</g>
<g>
<title>sun/reflect/generics/visitor/Reifier.visitClassTypeSignature (1 samples, 0.20%)</title><rect x="19.4" y="291.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.4" y="302.0"></text>
</g>
<g>
<title>sun/reflect/generics/visitor/Reifier.reifyTypeArguments (1 samples, 0.20%)</title><rect x="19.4" y="275.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.4" y="286.0"></text>
</g>
<g>
<title>sun/reflect/generics/tree/Wildcard.accept (1 samples, 0.20%)</title><rect x="19.4" y="259.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.4" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory._handleSingleArgumentConstructor (1 samples, 0.20%)</title><rect x="21.7" y="403.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.getRawParameterType (1 samples, 0.20%)</title><rect x="21.7" y="387.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.7" y="398.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.getParameterTypes (1 samples, 0.20%)</title><rect x="21.7" y="371.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.7" y="382.0"></text>
</g>
<g>
<title>java/lang/Object.clone (1 samples, 0.20%)</title><rect x="21.7" y="355.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.7" y="366.0"></text>
</g>
<g>
<title>JVM_Clone (1 samples, 0.20%)</title><rect x="21.7" y="339.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="24.7" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (1 samples, 0.20%)</title><rect x="21.7" y="323.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache.findValueDeserializer (1 samples, 0.20%)</title><rect x="24.0" y="691.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache._createAndCacheValueDeserializer (1 samples, 0.20%)</title><rect x="24.0" y="675.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache._createAndCache2 (1 samples, 0.20%)</title><rect x="24.0" y="659.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache._createDeserializer (1 samples, 0.20%)</title><rect x="24.0" y="643.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DeserializerCache.modifyTypeByAnnotation (1 samples, 0.20%)</title><rect x="24.0" y="627.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/AnnotationIntrospector.refineDeserializationType (1 samples, 0.20%)</title><rect x="24.0" y="611.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findDeserializationKeyType (1 samples, 0.20%)</title><rect x="24.0" y="595.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.0" y="606.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.20%)</title><rect x="24.0" y="579.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="27.0" y="590.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.20%)</title><rect x="24.0" y="563.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="27.0" y="574.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::remove_at(int) (1 samples, 0.20%)</title><rect x="24.0" y="547.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="27.0" y="558.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (3 samples, 0.60%)</title><rect x="26.4" y="755.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.4" y="766.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (3 samples, 0.60%)</title><rect x="26.4" y="739.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.4" y="750.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (3 samples, 0.60%)</title><rect x="26.4" y="723.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.4" y="734.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (3 samples, 0.60%)</title><rect x="26.4" y="707.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.4" y="718.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (3 samples, 0.60%)</title><rect x="26.4" y="691.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.4" y="702.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (3 samples, 0.60%)</title><rect x="26.4" y="675.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.4" y="686.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.access$500 (3 samples, 0.60%)</title><rect x="26.4" y="659.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.4" y="670.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.deliver (3 samples, 0.60%)</title><rect x="26.4" y="643.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.4" y="654.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$200 (3 samples, 0.60%)</title><rect x="26.4" y="627.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.4" y="638.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.handle (3 samples, 0.60%)</title><rect x="26.4" y="611.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.4" y="622.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$2.apply (2 samples, 0.40%)</title><rect x="26.4" y="595.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.4" y="606.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$2.addToHistory (1 samples, 0.20%)</title><rect x="26.4" y="579.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.4" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.20%)</title><rect x="26.4" y="563.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.4" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.checkForComodification (1 samples, 0.20%)</title><rect x="26.4" y="547.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.4" y="558.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$000 (1 samples, 0.20%)</title><rect x="28.7" y="579.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.7" y="590.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.end (1 samples, 0.20%)</title><rect x="28.7" y="563.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.7" y="574.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/term/RequestHandler.accept (1 samples, 0.20%)</title><rect x="28.7" y="547.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.7" y="558.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/term/RequestHandler.accept (1 samples, 0.20%)</title><rect x="28.7" y="531.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.7" y="542.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.handle (1 samples, 0.20%)</title><rect x="28.7" y="515.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.7" y="526.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.handle (1 samples, 0.20%)</title><rect x="28.7" y="499.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.7" y="510.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobImpl.run (1 samples, 0.20%)</title><rect x="28.7" y="483.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.7" y="494.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobImpl.run (1 samples, 0.20%)</title><rect x="28.7" y="467.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.7" y="478.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl.run (1 samples, 0.20%)</title><rect x="28.7" y="451.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.7" y="462.0"></text>
</g>
<g>
<title>com/taobao/middleware/cli/impl/DefaultCLI.parse (1 samples, 0.20%)</title><rect x="28.7" y="435.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.7" y="446.0"></text>
</g>
<g>
<title>com/taobao/middleware/cli/impl/DefaultParser.parse (1 samples, 0.20%)</title><rect x="28.7" y="419.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.7" y="430.0"></text>
</g>
<g>
<title>java/util/Collections.sort (1 samples, 0.20%)</title><rect x="28.7" y="403.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.7" y="414.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.refresh (1 samples, 0.20%)</title><rect x="31.1" y="595.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.1" y="606.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.refresh (1 samples, 0.20%)</title><rect x="31.1" y="579.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.1" y="590.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (1 samples, 0.20%)</title><rect x="31.1" y="563.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.1" y="574.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (1 samples, 0.20%)</title><rect x="31.1" y="547.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.1" y="558.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.sendChunk (1 samples, 0.20%)</title><rect x="31.1" y="531.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.1" y="542.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (1 samples, 0.20%)</title><rect x="31.1" y="515.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.1" y="526.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (1 samples, 0.20%)</title><rect x="31.1" y="499.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.1" y="510.0"></text>
</g>
<g>
<title>io/termd/core/http/HttpTtyConnection$1.accept (1 samples, 0.20%)</title><rect x="31.1" y="483.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.1" y="494.0"></text>
</g>
<g>
<title>io/termd/core/http/HttpTtyConnection$1.accept (1 samples, 0.20%)</title><rect x="31.1" y="467.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="34.1" y="478.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/http/ExtHttpTtyConnection.write (1 samples, 0.20%)</title><rect x="31.1" y="451.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.1" y="462.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (1 samples, 0.20%)</title><rect x="31.1" y="435.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.1" y="446.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (1 samples, 0.20%)</title><rect x="31.1" y="419.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.1" y="430.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.20%)</title><rect x="31.1" y="403.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.1" y="414.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (1 samples, 0.20%)</title><rect x="31.1" y="387.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.1" y="398.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.20%)</title><rect x="31.1" y="371.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.1" y="382.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/ChannelDuplexHandler.flush (1 samples, 0.20%)</title><rect x="31.1" y="355.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.1" y="366.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.flush (1 samples, 0.20%)</title><rect x="31.1" y="339.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.1" y="350.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeFlush (1 samples, 0.20%)</title><rect x="31.1" y="323.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.1" y="334.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.20%)</title><rect x="31.1" y="307.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.1" y="318.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.flush (1 samples, 0.20%)</title><rect x="31.1" y="291.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.1" y="302.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/websocketx/WebSocketProtocolHandler.flush (1 samples, 0.20%)</title><rect x="31.1" y="275.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.1" y="286.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.flush (1 samples, 0.20%)</title><rect x="31.1" y="259.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.1" y="270.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeFlush (1 samples, 0.20%)</title><rect x="31.1" y="243.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.1" y="254.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.20%)</title><rect x="31.1" y="227.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.1" y="238.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/stream/ChunkedWriteHandler.flush (1 samples, 0.20%)</title><rect x="31.1" y="211.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.1" y="222.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/stream/ChunkedWriteHandler.doFlush (1 samples, 0.20%)</title><rect x="31.1" y="195.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.1" y="206.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.20%)</title><rect x="31.1" y="179.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.1" y="190.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.20%)</title><rect x="31.1" y="163.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.1" y="174.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeWrite (1 samples, 0.20%)</title><rect x="31.1" y="147.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.1" y="158.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.20%)</title><rect x="31.1" y="131.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.1" y="142.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/MessageToMessageEncoder.write (1 samples, 0.20%)</title><rect x="31.1" y="115.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.1" y="126.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/CodecOutputList.newInstance (1 samples, 0.20%)</title><rect x="31.1" y="99.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.1" y="110.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocal.get (1 samples, 0.20%)</title><rect x="31.1" y="83.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.1" y="94.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/InternalThreadLocalMap.get (1 samples, 0.20%)</title><rect x="31.1" y="67.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.1" y="78.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/InternalThreadLocalMap.fastGet (1 samples, 0.20%)</title><rect x="31.1" y="51.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.1" y="62.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocalThread.threadLocalMap (1 samples, 0.20%)</title><rect x="31.1" y="35.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.1" y="46.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.20%)</title><rect x="33.4" y="1235.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="36.4" y="1246.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.allocate (1 samples, 0.20%)</title><rect x="35.8" y="1283.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.8" y="1294.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.ioBuffer (1 samples, 0.20%)</title><rect x="35.8" y="1267.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.8" y="1278.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.20%)</title><rect x="35.8" y="1251.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.8" y="1262.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.20%)</title><rect x="35.8" y="1235.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="38.8" y="1246.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (1 samples, 0.20%)</title><rect x="35.8" y="1219.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.8" y="1230.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (1 samples, 0.20%)</title><rect x="35.8" y="1203.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.8" y="1214.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/ResourceLeakDetector.track (1 samples, 0.20%)</title><rect x="35.8" y="1187.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.8" y="1198.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/ResourceLeakDetector.track0 (1 samples, 0.20%)</title><rect x="35.8" y="1171.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.8" y="1182.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/PlatformDependent.threadLocalRandom (1 samples, 0.20%)</title><rect x="35.8" y="1155.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.8" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/PlatformDependent$2.current (1 samples, 0.20%)</title><rect x="35.8" y="1139.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.current (1 samples, 0.20%)</title><rect x="35.8" y="1123.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.8" y="1134.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.select (1 samples, 0.20%)</title><rect x="38.1" y="1347.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.1" y="1358.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/SelectedSelectionKeySetSelector.select (1 samples, 0.20%)</title><rect x="38.1" y="1331.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.1" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.20%)</title><rect x="38.1" y="1315.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.1" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.20%)</title><rect x="38.1" y="1299.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.1" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.20%)</title><rect x="38.1" y="1283.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.20%)</title><rect x="38.1" y="1267.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.1" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.20%)</title><rect x="38.1" y="1251.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.1" y="1262.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.20%)</title><rect x="38.1" y="1235.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="41.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3 samples, 0.60%)</title><rect x="40.4" y="1411.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.4" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3 samples, 0.60%)</title><rect x="40.4" y="1395.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.4" y="1406.0"></text>
</g>
<g>
<title>com/mysql/cj/jdbc/AbandonedConnectionCleanupThread.run (1 samples, 0.20%)</title><rect x="40.4" y="1379.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.4" y="1390.0"></text>
</g>
<g>
<title>com/mysql/cj/jdbc/AbandonedConnectionCleanupThread.checkThreadContextClassLoader (1 samples, 0.20%)</title><rect x="40.4" y="1363.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.getResource (1 samples, 0.20%)</title><rect x="40.4" y="1347.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.4" y="1358.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findResource (1 samples, 0.20%)</title><rect x="40.4" y="1331.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.4" y="1342.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="40.4" y="1315.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.4" y="1326.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$2.run (1 samples, 0.20%)</title><rect x="40.4" y="1299.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.4" y="1310.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$2.run (1 samples, 0.20%)</title><rect x="40.4" y="1283.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.4" y="1294.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath.findResource (1 samples, 0.20%)</title><rect x="40.4" y="1267.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.4" y="1278.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$FileLoader.findResource (1 samples, 0.20%)</title><rect x="40.4" y="1251.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.4" y="1262.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$FileLoader.getResource (1 samples, 0.20%)</title><rect x="40.4" y="1235.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.4" y="1246.0"></text>
</g>
<g>
<title>java/io/File.exists (1 samples, 0.20%)</title><rect x="40.4" y="1219.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.4" y="1230.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes (1 samples, 0.20%)</title><rect x="40.4" y="1203.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.4" y="1214.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes0 (1 samples, 0.20%)</title><rect x="40.4" y="1187.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.4" y="1198.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.20%)</title><rect x="40.4" y="1171.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="43.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (2 samples, 0.40%)</title><rect x="42.8" y="1379.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201 (2 samples, 0.40%)</title><rect x="42.8" y="1363.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2 samples, 0.40%)</title><rect x="42.8" y="1347.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run$$$capture (2 samples, 0.40%)</title><rect x="42.8" y="1331.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (2 samples, 0.40%)</title><rect x="42.8" y="1315.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="45.8" y="1326.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessTask.run (2 samples, 0.40%)</title><rect x="42.8" y="1299.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.8" y="1310.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (2 samples, 0.40%)</title><rect x="42.8" y="1283.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="45.8" y="1294.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (2 samples, 0.40%)</title><rect x="42.8" y="1267.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.8" y="1278.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.access$100 (2 samples, 0.40%)</title><rect x="42.8" y="1251.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="45.8" y="1262.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.process (2 samples, 0.40%)</title><rect x="42.8" y="1235.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="45.8" y="1246.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.process (1 samples, 0.20%)</title><rect x="42.8" y="1219.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="45.8" y="1230.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.execute (1 samples, 0.20%)</title><rect x="42.8" y="1203.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.8" y="1214.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.execute0 (1 samples, 0.20%)</title><rect x="42.8" y="1187.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.8" y="1198.0"></text>
</g>
<g>
<title>Java_one_profiler_AsyncProfiler_execute0 (1 samples, 0.20%)</title><rect x="42.8" y="1171.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="45.8" y="1182.0"></text>
</g>
<g>
<title>jni_NewStringUTF (1 samples, 0.20%)</title><rect x="42.8" y="1155.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="45.8" y="1166.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.20%)</title><rect x="42.8" y="1139.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="45.8" y="1150.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.name (1 samples, 0.20%)</title><rect x="45.1" y="1219.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.1" y="1230.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.shouldOverridesName (1 samples, 0.20%)</title><rect x="45.1" y="1203.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/Class.getDeclaredMethod (1 samples, 0.20%)</title><rect x="45.1" y="1187.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/NoSuchMethodException.&lt;init&gt; (1 samples, 0.20%)</title><rect x="45.1" y="1171.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ReflectiveOperationException.&lt;init&gt; (1 samples, 0.20%)</title><rect x="45.1" y="1155.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="48.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.20%)</title><rect x="45.1" y="1139.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.20%)</title><rect x="45.1" y="1123.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.20%)</title><rect x="45.1" y="1107.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.20%)</title><rect x="45.1" y="1091.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.1" y="1102.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.20%)</title><rect x="45.1" y="1075.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="48.1" y="1086.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.20%)</title><rect x="45.1" y="1059.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="48.1" y="1070.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (1 samples, 0.20%)</title><rect x="45.1" y="1043.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="48.1" y="1054.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (1 samples, 0.20%)</title><rect x="45.1" y="1027.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="48.1" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.20%)</title><rect x="45.1" y="1011.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="48.1" y="1022.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.20%)</title><rect x="45.1" y="995.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="48.1" y="1006.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.20%)</title><rect x="45.1" y="979.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="48.1" y="990.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.20%)</title><rect x="45.1" y="963.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="48.1" y="974.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.20%)</title><rect x="45.1" y="947.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="48.1" y="958.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/net/Acceptor.run (3 samples, 0.60%)</title><rect x="47.5" y="1411.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.5" y="1422.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/net/NioEndpoint.setSocketOptions (3 samples, 0.60%)</title><rect x="47.5" y="1395.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.5" y="1406.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/net/NioEndpoint.setSocketOptions (3 samples, 0.60%)</title><rect x="47.5" y="1379.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.5" y="1390.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.20%)</title><rect x="47.5" y="1363.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="50.5" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.20%)</title><rect x="47.5" y="1347.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="50.5" y="1358.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(instanceKlassHandle, Thread*) (1 samples, 0.20%)</title><rect x="47.5" y="1331.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="50.5" y="1342.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.20%)</title><rect x="47.5" y="1315.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="50.5" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.20%)</title><rect x="47.5" y="1299.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="50.5" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.20%)</title><rect x="47.5" y="1283.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="50.5" y="1294.0"></text>
</g>
<g>
<title>Verifier::verify(instanceKlassHandle, Verifier::Mode, bool, Thread*) (1 samples, 0.20%)</title><rect x="47.5" y="1267.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="50.5" y="1278.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.20%)</title><rect x="47.5" y="1251.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="50.5" y="1262.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle, Thread*) (1 samples, 0.20%)</title><rect x="47.5" y="1235.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="50.5" y="1246.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle, StackMapTable*, Thread*) (1 samples, 0.20%)</title><rect x="47.5" y="1219.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="50.5" y="1230.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.20%)</title><rect x="47.5" y="1203.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="50.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="49.8" y="1363.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.8" y="1374.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="49.8" y="1347.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.8" y="1358.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="49.8" y="1331.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.8" y="1342.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="49.8" y="1315.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.8" y="1326.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="49.8" y="1299.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.8" y="1310.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="49.8" y="1283.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.8" y="1294.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="49.8" y="1267.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.8" y="1278.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath.getResource (1 samples, 0.20%)</title><rect x="49.8" y="1251.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.8" y="1262.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath.getNextLoader (1 samples, 0.20%)</title><rect x="49.8" y="1235.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.8" y="1246.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath.getLoader (1 samples, 0.20%)</title><rect x="49.8" y="1219.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/net/SocketWrapperBase.&lt;clinit&gt; (1 samples, 0.20%)</title><rect x="52.1" y="1363.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/juli/logging/LogFactory.getLog (1 samples, 0.20%)</title><rect x="52.1" y="1347.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/juli/logging/LogFactory.getInstance (1 samples, 0.20%)</title><rect x="52.1" y="1331.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/juli/logging/LogFactory.getInstance (1 samples, 0.20%)</title><rect x="52.1" y="1315.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/juli/logging/DirectJDKLog.getInstance (1 samples, 0.20%)</title><rect x="52.1" y="1299.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/juli/logging/DirectJDKLog.&lt;init&gt; (1 samples, 0.20%)</title><rect x="52.1" y="1283.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.1" y="1294.0"></text>
</g>
<g>
<title>java/util/logging/Logger.getLogger (1 samples, 0.20%)</title><rect x="52.1" y="1267.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.1" y="1278.0"></text>
</g>
<g>
<title>java/util/logging/Logger.demandLogger (1 samples, 0.20%)</title><rect x="52.1" y="1251.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.1" y="1262.0"></text>
</g>
<g>
<title>java/util/logging/LogManager.demandLogger (1 samples, 0.20%)</title><rect x="52.1" y="1235.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.1" y="1246.0"></text>
</g>
<g>
<title>java/util/logging/LogManager.addLogger (1 samples, 0.20%)</title><rect x="52.1" y="1219.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.1" y="1230.0"></text>
</g>
<g>
<title>java/util/logging/LogManager$LoggerContext.addLocalLogger (1 samples, 0.20%)</title><rect x="52.1" y="1203.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.1" y="1214.0"></text>
</g>
<g>
<title>java/util/logging/LogManager$LoggerContext.addLocalLogger (1 samples, 0.20%)</title><rect x="52.1" y="1187.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.1" y="1198.0"></text>
</g>
<g>
<title>java/util/logging/LogManager$LoggerContext.processParentHandlers (1 samples, 0.20%)</title><rect x="52.1" y="1171.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.20%)</title><rect x="52.1" y="1155.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.20%)</title><rect x="52.1" y="1139.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/net/NioEndpoint$Poller.run (1 samples, 0.20%)</title><rect x="54.5" y="1411.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="57.5" y="1422.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.20%)</title><rect x="54.5" y="1395.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.5" y="1406.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.20%)</title><rect x="54.5" y="1379.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.5" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.20%)</title><rect x="54.5" y="1363.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.5" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.20%)</title><rect x="54.5" y="1347.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="57.5" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.20%)</title><rect x="54.5" y="1331.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="57.5" y="1342.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.20%)</title><rect x="54.5" y="1315.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="57.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/threads/TaskThread$WrappingRunnable.run (102 samples, 20.24%)</title><rect x="56.8" y="1411.0" width="238.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.8" y="1422.0">org/apache/tomcat/util/threads/T..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (102 samples, 20.24%)</title><rect x="56.8" y="1395.0" width="238.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.8" y="1406.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (102 samples, 20.24%)</title><rect x="56.8" y="1379.0" width="238.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.8" y="1390.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (3 samples, 0.60%)</title><rect x="56.8" y="1363.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301 (3 samples, 0.60%)</title><rect x="56.8" y="1347.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset (3 samples, 0.60%)</title><rect x="56.8" y="1331.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset$$$capture (3 samples, 0.60%)</title><rect x="56.8" y="1315.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (3 samples, 0.60%)</title><rect x="56.8" y="1299.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/catalina/core/ContainerBase$ContainerBackgroundProcessor.run (1 samples, 0.20%)</title><rect x="56.8" y="1283.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="59.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/catalina/core/ContainerBase$ContainerBackgroundProcessor.processChildren (1 samples, 0.20%)</title><rect x="56.8" y="1267.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="59.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/catalina/core/ContainerBase$ContainerBackgroundProcessor.processChildren (1 samples, 0.20%)</title><rect x="56.8" y="1251.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/catalina/core/ContainerBase$ContainerBackgroundProcessor.processChildren (1 samples, 0.20%)</title><rect x="56.8" y="1235.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="59.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/catalina/core/StandardContext.backgroundProcess (1 samples, 0.20%)</title><rect x="56.8" y="1219.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/catalina/webresources/StandardRoot.backgroundProcess (1 samples, 0.20%)</title><rect x="56.8" y="1203.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/catalina/webresources/Cache.backgroundProcess (1 samples, 0.20%)</title><rect x="56.8" y="1187.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.8" y="1198.0"></text>
</g>
<g>
<title>java/util/TreeSet.addAll (1 samples, 0.20%)</title><rect x="56.8" y="1171.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.8" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.20%)</title><rect x="56.8" y="1155.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="59.8" y="1166.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (1 samples, 0.20%)</title><rect x="56.8" y="1139.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.8" y="1150.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.20%)</title><rect x="56.8" y="1123.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.8" y="1134.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.20%)</title><rect x="56.8" y="1107.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/catalina/core/StandardServer$1.run (1 samples, 0.20%)</title><rect x="59.2" y="1283.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/coyote/AbstractProtocol$2.run (1 samples, 0.20%)</title><rect x="61.5" y="1283.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.5" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$SetFromMap.iterator (1 samples, 0.20%)</title><rect x="61.5" y="1267.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.20%)</title><rect x="61.5" y="1251.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeyIterator.&lt;init&gt; (1 samples, 0.20%)</title><rect x="61.5" y="1235.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.20%)</title><rect x="61.5" y="1219.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 1.59%)</title><rect x="63.8" y="1363.0" width="18.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.take (8 samples, 1.59%)</title><rect x="63.8" y="1347.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.take (8 samples, 1.59%)</title><rect x="63.8" y="1331.0" width="18.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="66.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (6 samples, 1.19%)</title><rect x="63.8" y="1315.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="66.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.20%)</title><rect x="63.8" y="1299.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.20%)</title><rect x="63.8" y="1283.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="66.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.20%)</title><rect x="63.8" y="1267.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.20%)</title><rect x="63.8" y="1251.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.99%)</title><rect x="66.2" y="1299.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.2" y="1310.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (5 samples, 0.99%)</title><rect x="66.2" y="1283.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.2" y="1294.0"></text>
</g>
<g>
<title>Unsafe_Park (5 samples, 0.99%)</title><rect x="66.2" y="1267.0" width="11.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="69.2" y="1278.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.99%)</title><rect x="66.2" y="1251.0" width="11.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="69.2" y="1262.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.99%)</title><rect x="66.2" y="1235.0" width="11.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="69.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.awaitNanos (2 samples, 0.40%)</title><rect x="77.9" y="1315.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkNanos (2 samples, 0.40%)</title><rect x="77.9" y="1299.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.9" y="1310.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (2 samples, 0.40%)</title><rect x="77.9" y="1283.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.9" y="1294.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.40%)</title><rect x="77.9" y="1267.0" width="4.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="80.9" y="1278.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.20%)</title><rect x="77.9" y="1251.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="80.9" y="1262.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.20%)</title><rect x="77.9" y="1235.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="80.9" y="1246.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.20%)</title><rect x="80.2" y="1251.0" width="2.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="83.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/net/SocketProcessorBase.run (91 samples, 18.06%)</title><rect x="82.6" y="1363.0" width="213.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.6" y="1374.0">org/apache/tomcat/util/net/S..</text>
</g>
<g>
<title>org/apache/tomcat/util/net/NioEndpoint$SocketProcessor.doRun (91 samples, 18.06%)</title><rect x="82.6" y="1347.0" width="213.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.6" y="1358.0">org/apache/tomcat/util/net/N..</text>
</g>
<g>
<title>org/apache/coyote/AbstractProtocol$ConnectionHandler.process (91 samples, 18.06%)</title><rect x="82.6" y="1331.0" width="213.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.6" y="1342.0">org/apache/coyote/AbstractPr..</text>
</g>
<g>
<title>org/apache/coyote/AbstractProcessorLight.process (87 samples, 17.26%)</title><rect x="82.6" y="1315.0" width="203.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.6" y="1326.0">org/apache/coyote/AbstractP..</text>
</g>
<g>
<title>org/apache/coyote/http11/Http11Processor.service (87 samples, 17.26%)</title><rect x="82.6" y="1299.0" width="203.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.6" y="1310.0">org/apache/coyote/http11/Ht..</text>
</g>
<g>
<title>org/apache/catalina/connector/CoyoteAdapter.service (87 samples, 17.26%)</title><rect x="82.6" y="1283.0" width="203.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.6" y="1294.0">org/apache/catalina/connect..</text>
</g>
<g>
<title>org/apache/catalina/connector/Connector.createRequest (3 samples, 0.60%)</title><rect x="82.6" y="1267.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.40%)</title><rect x="82.6" y="1251.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.6" y="1262.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (2 samples, 0.40%)</title><rect x="82.6" y="1235.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.40%)</title><rect x="82.6" y="1219.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.6" y="1230.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (2 samples, 0.40%)</title><rect x="82.6" y="1203.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="85.6" y="1214.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.40%)</title><rect x="82.6" y="1187.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.6" y="1198.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (2 samples, 0.40%)</title><rect x="82.6" y="1171.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.6" y="1182.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (2 samples, 0.40%)</title><rect x="82.6" y="1155.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.6" y="1166.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (2 samples, 0.40%)</title><rect x="82.6" y="1139.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.6" y="1150.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (2 samples, 0.40%)</title><rect x="82.6" y="1123.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.6" y="1134.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.20%)</title><rect x="82.6" y="1107.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.20%)</title><rect x="82.6" y="1091.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="85.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.20%)</title><rect x="82.6" y="1075.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.6" y="1086.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.20%)</title><rect x="82.6" y="1059.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="85.6" y="1070.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.20%)</title><rect x="82.6" y="1043.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="85.6" y="1054.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.20%)</title><rect x="82.6" y="1027.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="85.6" y="1038.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.20%)</title><rect x="82.6" y="1011.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="85.6" y="1022.0"></text>
</g>
<g>
<title>small_malloc_should_clear (1 samples, 0.20%)</title><rect x="82.6" y="995.0" width="2.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="85.6" y="1006.0"></text>
</g>
<g>
<title>small_malloc_from_free_list (1 samples, 0.20%)</title><rect x="82.6" y="979.0" width="2.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="85.6" y="990.0"></text>
</g>
<g>
<title>small_free_list_remove_ptr_no_clear (1 samples, 0.20%)</title><rect x="82.6" y="963.0" width="2.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="85.6" y="974.0"></text>
</g>
<g>
<title>sun/misc/Resource.getBytes (1 samples, 0.20%)</title><rect x="84.9" y="1107.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.9" y="1118.0"></text>
</g>
<g>
<title>sun/misc/Resource.cachedInputStream (1 samples, 0.20%)</title><rect x="84.9" y="1091.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.9" y="1102.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$JarLoader$2.getInputStream (1 samples, 0.20%)</title><rect x="84.9" y="1075.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.9" y="1086.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getInputStream (1 samples, 0.20%)</title><rect x="84.9" y="1059.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.9" y="1070.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.getInputStream (1 samples, 0.20%)</title><rect x="84.9" y="1043.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.9" y="1054.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.put (1 samples, 0.20%)</title><rect x="84.9" y="1027.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="87.9" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="84.9" y="1011.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="87.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/Request.&lt;init&gt; (1 samples, 0.20%)</title><rect x="87.3" y="1251.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="87.3" y="1235.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.3" y="1246.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="87.3" y="1219.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="87.3" y="1203.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.3" y="1214.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="87.3" y="1187.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.3" y="1198.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="87.3" y="1171.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.3" y="1182.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="87.3" y="1155.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.3" y="1166.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="87.3" y="1139.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.3" y="1150.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.20%)</title><rect x="87.3" y="1123.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.3" y="1134.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.20%)</title><rect x="87.3" y="1107.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.3" y="1118.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.20%)</title><rect x="87.3" y="1091.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.20%)</title><rect x="87.3" y="1075.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.20%)</title><rect x="87.3" y="1059.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.3" y="1070.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.20%)</title><rect x="87.3" y="1043.0" width="2.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="90.3" y="1054.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.20%)</title><rect x="87.3" y="1027.0" width="2.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="90.3" y="1038.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, unsigned char, Thread*) (1 samples, 0.20%)</title><rect x="87.3" y="1011.0" width="2.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="90.3" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, bool, Thread*) (1 samples, 0.20%)</title><rect x="87.3" y="995.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="90.3" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::parseClassFile(Symbol*, ClassLoaderData*, Handle, KlassHandle, GrowableArray&lt;Handle&gt;*, TempNewSymbol&amp;, bool, Thread*) (1 samples, 0.20%)</title><rect x="87.3" y="979.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="90.3" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.20%)</title><rect x="87.3" y="963.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="90.3" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(bool, AccessFlags*, Thread*) (1 samples, 0.20%)</title><rect x="87.3" y="947.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="90.3" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_checked_exceptions(unsigned short*, unsigned int, Thread*) (1 samples, 0.20%)</title><rect x="87.3" y="931.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="90.3" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::valid_klass_reference_at(int) (1 samples, 0.20%)</title><rect x="87.3" y="915.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="90.3" y="926.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/Connector.createResponse (1 samples, 0.20%)</title><rect x="89.6" y="1267.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/Response.&lt;init&gt; (1 samples, 0.20%)</title><rect x="89.6" y="1251.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/Response.&lt;init&gt; (1 samples, 0.20%)</title><rect x="89.6" y="1235.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="89.6" y="1219.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.6" y="1230.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="89.6" y="1203.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="89.6" y="1187.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.6" y="1198.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="89.6" y="1171.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.6" y="1182.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="89.6" y="1155.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.6" y="1166.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="89.6" y="1139.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.6" y="1150.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="89.6" y="1123.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.6" y="1134.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.20%)</title><rect x="89.6" y="1107.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.6" y="1118.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.20%)</title><rect x="89.6" y="1091.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="92.6" y="1102.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.20%)</title><rect x="89.6" y="1075.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.20%)</title><rect x="89.6" y="1059.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.20%)</title><rect x="89.6" y="1043.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.6" y="1054.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.20%)</title><rect x="89.6" y="1027.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="92.6" y="1038.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.20%)</title><rect x="89.6" y="1011.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="92.6" y="1022.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, unsigned char, Thread*) (1 samples, 0.20%)</title><rect x="89.6" y="995.0" width="2.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="92.6" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, bool, Thread*) (1 samples, 0.20%)</title><rect x="89.6" y="979.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="92.6" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parseClassFile(Symbol*, ClassLoaderData*, Handle, KlassHandle, GrowableArray&lt;Handle&gt;*, TempNewSymbol&amp;, bool, Thread*) (1 samples, 0.20%)</title><rect x="89.6" y="963.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="92.6" y="974.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_file_load_hook(Symbol*, Handle, Handle, unsigned char**, unsigned char**, JvmtiCachedClassFileData**) (1 samples, 0.20%)</title><rect x="89.6" y="947.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="92.6" y="958.0"></text>
</g>
<g>
<title>JvmtiClassFileLoadHookPoster::post_all_envs() (1 samples, 0.20%)</title><rect x="89.6" y="931.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="92.6" y="942.0"></text>
</g>
<g>
<title>JvmtiClassFileLoadHookPoster::post_to_env(JvmtiEnv*, bool) (1 samples, 0.20%)</title><rect x="89.6" y="915.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="92.6" y="926.0"></text>
</g>
<g>
<title>eventHandlerClassFileLoadHook (1 samples, 0.20%)</title><rect x="89.6" y="899.0" width="2.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="92.6" y="910.0"></text>
</g>
<g>
<title>transformClassFile (1 samples, 0.20%)</title><rect x="89.6" y="883.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="92.6" y="894.0"></text>
</g>
<g>
<title>jni_CallObjectMethod (1 samples, 0.20%)</title><rect x="89.6" y="867.0" width="2.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="92.6" y="878.0"></text>
</g>
<g>
<title>org/apache/catalina/core/StandardEngineValve.invoke (83 samples, 16.47%)</title><rect x="91.9" y="1267.0" width="194.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.9" y="1278.0">org/apache/catalina/core/..</text>
</g>
<g>
<title>org/apache/catalina/valves/ErrorReportValve.invoke (83 samples, 16.47%)</title><rect x="91.9" y="1251.0" width="194.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.9" y="1262.0">org/apache/catalina/valve..</text>
</g>
<g>
<title>org/apache/catalina/core/StandardHostValve.invoke (83 samples, 16.47%)</title><rect x="91.9" y="1235.0" width="194.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.9" y="1246.0">org/apache/catalina/core/..</text>
</g>
<g>
<title>org/apache/catalina/authenticator/AuthenticatorBase.invoke (83 samples, 16.47%)</title><rect x="91.9" y="1219.0" width="194.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.9" y="1230.0">org/apache/catalina/authe..</text>
</g>
<g>
<title>org/apache/catalina/authenticator/AuthenticatorBase.getJaspicProvider (1 samples, 0.20%)</title><rect x="91.9" y="1203.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="94.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/catalina/authenticator/AuthenticatorBase.findJaspicProvider (1 samples, 0.20%)</title><rect x="91.9" y="1187.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.9" y="1198.0"></text>
</g>
<g>
<title>javax/security/auth/message/config/AuthConfigFactory.getFactory (1 samples, 0.20%)</title><rect x="91.9" y="1171.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.9" y="1182.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="91.9" y="1155.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.9" y="1166.0"></text>
</g>
<g>
<title>javax/security/auth/message/config/AuthConfigFactory$1.run (1 samples, 0.20%)</title><rect x="91.9" y="1139.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.9" y="1150.0"></text>
</g>
<g>
<title>javax/security/auth/message/config/AuthConfigFactory$1.run (1 samples, 0.20%)</title><rect x="91.9" y="1123.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/Class.forName (1 samples, 0.20%)</title><rect x="91.9" y="1107.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="94.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/Class.forName0 (1 samples, 0.20%)</title><rect x="91.9" y="1091.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.9" y="1102.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.20%)</title><rect x="91.9" y="1075.0" width="2.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="94.9" y="1086.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.20%)</title><rect x="91.9" y="1059.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="94.9" y="1070.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.20%)</title><rect x="91.9" y="1043.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="94.9" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.20%)</title><rect x="91.9" y="1027.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="94.9" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(instanceKlassHandle, Thread*) (1 samples, 0.20%)</title><rect x="91.9" y="1011.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="94.9" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.20%)</title><rect x="91.9" y="995.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="94.9" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.20%)</title><rect x="91.9" y="979.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="94.9" y="990.0"></text>
</g>
<g>
<title>Verifier::verify(instanceKlassHandle, Verifier::Mode, bool, Thread*) (1 samples, 0.20%)</title><rect x="91.9" y="963.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="94.9" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.20%)</title><rect x="91.9" y="947.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="94.9" y="958.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle, Thread*) (1 samples, 0.20%)</title><rect x="91.9" y="931.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="94.9" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_exception_handler_targets(unsigned short, bool, StackMapFrame*, StackMapTable*, Thread*) (1 samples, 0.20%)</title><rect x="91.9" y="915.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="94.9" y="926.0"></text>
</g>
<g>
<title>org/apache/catalina/core/StandardContextValve.invoke (82 samples, 16.27%)</title><rect x="94.3" y="1203.0" width="192.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.3" y="1214.0">org/apache/catalina/core/..</text>
</g>
<g>
<title>org/apache/catalina/core/StandardWrapperValve.invoke (82 samples, 16.27%)</title><rect x="94.3" y="1187.0" width="192.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.3" y="1198.0">org/apache/catalina/core/..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.doFilter (77 samples, 15.28%)</title><rect x="94.3" y="1171.0" width="180.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.3" y="1182.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.internalDoFilter (77 samples, 15.28%)</title><rect x="94.3" y="1155.0" width="180.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.3" y="1166.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/springframework/web/filter/OncePerRequestFilter.doFilter (77 samples, 15.28%)</title><rect x="94.3" y="1139.0" width="180.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.3" y="1150.0">org/springframework/web..</text>
</g>
<g>
<title>org/springframework/web/filter/CharacterEncodingFilter.doFilterInternal (76 samples, 15.08%)</title><rect x="94.3" y="1123.0" width="177.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.3" y="1134.0">org/springframework/web..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.doFilter (76 samples, 15.08%)</title><rect x="94.3" y="1107.0" width="177.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.3" y="1118.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.internalDoFilter (76 samples, 15.08%)</title><rect x="94.3" y="1091.0" width="177.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.3" y="1102.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/springframework/web/filter/OncePerRequestFilter.doFilter (76 samples, 15.08%)</title><rect x="94.3" y="1075.0" width="177.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.3" y="1086.0">org/springframework/web..</text>
</g>
<g>
<title>org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilter.doFilterInternal (76 samples, 15.08%)</title><rect x="94.3" y="1059.0" width="177.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.3" y="1070.0">org/springframework/boo..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.doFilter (76 samples, 15.08%)</title><rect x="94.3" y="1043.0" width="177.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.3" y="1054.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.internalDoFilter (76 samples, 15.08%)</title><rect x="94.3" y="1027.0" width="177.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.3" y="1038.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/springframework/web/filter/OncePerRequestFilter.doFilter (76 samples, 15.08%)</title><rect x="94.3" y="1011.0" width="177.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.3" y="1022.0">org/springframework/web..</text>
</g>
<g>
<title>org/springframework/web/filter/FormContentFilter.doFilterInternal (76 samples, 15.08%)</title><rect x="94.3" y="995.0" width="177.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.3" y="1006.0">org/springframework/web..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.doFilter (76 samples, 15.08%)</title><rect x="94.3" y="979.0" width="177.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.3" y="990.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.internalDoFilter (76 samples, 15.08%)</title><rect x="94.3" y="963.0" width="177.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.3" y="974.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/springframework/web/filter/OncePerRequestFilter.doFilter (76 samples, 15.08%)</title><rect x="94.3" y="947.0" width="177.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.3" y="958.0">org/springframework/web..</text>
</g>
<g>
<title>org/springframework/web/filter/RequestContextFilter.doFilterInternal (76 samples, 15.08%)</title><rect x="94.3" y="931.0" width="177.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.3" y="942.0">org/springframework/web..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.doFilter (75 samples, 14.88%)</title><rect x="94.3" y="915.0" width="175.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.3" y="926.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.internalDoFilter (75 samples, 14.88%)</title><rect x="94.3" y="899.0" width="175.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.3" y="910.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/apache/tomcat/websocket/server/WsFilter.doFilter (75 samples, 14.88%)</title><rect x="94.3" y="883.0" width="175.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.3" y="894.0">org/apache/tomcat/webso..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.doFilter (75 samples, 14.88%)</title><rect x="94.3" y="867.0" width="175.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.3" y="878.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterChain.internalDoFilter (75 samples, 14.88%)</title><rect x="94.3" y="851.0" width="175.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.3" y="862.0">org/apache/catalina/cor..</text>
</g>
<g>
<title>javax/servlet/http/HttpServlet.service (75 samples, 14.88%)</title><rect x="94.3" y="835.0" width="175.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.3" y="846.0">javax/servlet/http/Http..</text>
</g>
<g>
<title>org/springframework/web/servlet/FrameworkServlet.service (75 samples, 14.88%)</title><rect x="94.3" y="819.0" width="175.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.3" y="830.0">org/springframework/web..</text>
</g>
<g>
<title>javax/servlet/http/HttpServlet.service (75 samples, 14.88%)</title><rect x="94.3" y="803.0" width="175.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.3" y="814.0">javax/servlet/http/Http..</text>
</g>
<g>
<title>org/springframework/web/servlet/FrameworkServlet.doGet (75 samples, 14.88%)</title><rect x="94.3" y="787.0" width="175.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.3" y="798.0">org/springframework/web..</text>
</g>
<g>
<title>org/springframework/web/servlet/FrameworkServlet.processRequest (75 samples, 14.88%)</title><rect x="94.3" y="771.0" width="175.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.3" y="782.0">org/springframework/web..</text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.buildLocaleContext (1 samples, 0.20%)</title><rect x="94.3" y="755.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="94.3" y="739.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.3" y="750.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="94.3" y="723.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="94.3" y="707.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.3" y="718.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="94.3" y="691.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.3" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="94.3" y="675.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.3" y="686.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="94.3" y="659.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.3" y="670.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="94.3" y="643.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.3" y="654.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.20%)</title><rect x="94.3" y="627.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="97.3" y="638.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.20%)</title><rect x="94.3" y="611.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="97.3" y="622.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.20%)</title><rect x="94.3" y="595.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.3" y="606.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.20%)</title><rect x="94.3" y="579.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.20%)</title><rect x="94.3" y="563.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.3" y="574.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.20%)</title><rect x="94.3" y="547.0" width="2.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="97.3" y="558.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.20%)</title><rect x="94.3" y="531.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="97.3" y="542.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, unsigned char, Thread*) (1 samples, 0.20%)</title><rect x="94.3" y="515.0" width="2.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="97.3" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, bool, Thread*) (1 samples, 0.20%)</title><rect x="94.3" y="499.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="97.3" y="510.0"></text>
</g>
<g>
<title>ClassFileParser::parseClassFile(Symbol*, ClassLoaderData*, Handle, KlassHandle, GrowableArray&lt;Handle&gt;*, TempNewSymbol&amp;, bool, Thread*) (1 samples, 0.20%)</title><rect x="94.3" y="483.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="97.3" y="494.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.20%)</title><rect x="94.3" y="467.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="97.3" y="478.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(bool, AccessFlags*, Thread*) (1 samples, 0.20%)</title><rect x="94.3" y="451.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="97.3" y="462.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.20%)</title><rect x="94.3" y="435.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="97.3" y="446.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.20%)</title><rect x="94.3" y="419.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="97.3" y="430.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, bool, MetaspaceObj::Type, Thread*) (1 samples, 0.20%)</title><rect x="94.3" y="403.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="97.3" y="414.0"></text>
</g>
<g>
<title>Metachunk::object_alignment() (1 samples, 0.20%)</title><rect x="94.3" y="387.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="97.3" y="398.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.doService (73 samples, 14.48%)</title><rect x="96.6" y="755.0" width="170.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.6" y="766.0">org/springframework/we..</text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.doDispatch (73 samples, 14.48%)</title><rect x="96.6" y="739.0" width="170.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.6" y="750.0">org/springframework/we..</text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.getHandler (1 samples, 0.20%)</title><rect x="96.6" y="723.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.6" y="734.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/handler/AbstractHandlerMapping.getHandler (1 samples, 0.20%)</title><rect x="96.6" y="707.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.6" y="718.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.getHandlerInternal (1 samples, 0.20%)</title><rect x="96.6" y="691.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.6" y="702.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.getHandlerInternal (1 samples, 0.20%)</title><rect x="96.6" y="675.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.6" y="686.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.getHandlerInternal (1 samples, 0.20%)</title><rect x="96.6" y="659.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.6" y="670.0"></text>
</g>
<g>
<title>org/springframework/web/util/UrlPathHelper.getLookupPathForRequest (1 samples, 0.20%)</title><rect x="96.6" y="643.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.6" y="654.0"></text>
</g>
<g>
<title>org/springframework/web/util/UrlPathHelper.getPathWithinServletMapping (1 samples, 0.20%)</title><rect x="96.6" y="627.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.6" y="638.0"></text>
</g>
<g>
<title>org/springframework/web/util/UrlPathHelper.getPathWithinApplication (1 samples, 0.20%)</title><rect x="96.6" y="611.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.6" y="622.0"></text>
</g>
<g>
<title>org/springframework/web/util/UrlPathHelper.getContextPath (1 samples, 0.20%)</title><rect x="96.6" y="595.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.6" y="606.0"></text>
</g>
<g>
<title>org/springframework/web/util/UrlPathHelper.decodeRequestString (1 samples, 0.20%)</title><rect x="96.6" y="579.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.6" y="590.0"></text>
</g>
<g>
<title>org/springframework/web/util/UrlPathHelper.decodeInternal (1 samples, 0.20%)</title><rect x="96.6" y="563.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="96.6" y="547.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.6" y="558.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="96.6" y="531.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.6" y="542.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="96.6" y="515.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="99.6" y="526.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="96.6" y="499.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="99.6" y="510.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="96.6" y="483.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="99.6" y="494.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="96.6" y="467.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.6" y="478.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="96.6" y="451.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.6" y="462.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath.getResource (1 samples, 0.20%)</title><rect x="96.6" y="435.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.6" y="446.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$JarLoader.getResource (1 samples, 0.20%)</title><rect x="96.6" y="419.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.6" y="430.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getJarEntry (1 samples, 0.20%)</title><rect x="96.6" y="403.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.6" y="414.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getEntry (1 samples, 0.20%)</title><rect x="96.6" y="387.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.6" y="398.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.getEntry (1 samples, 0.20%)</title><rect x="96.6" y="371.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.6" y="382.0"></text>
</g>
<g>
<title>java/util/zip/ZipCoder.getBytes (1 samples, 0.20%)</title><rect x="96.6" y="355.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.6" y="366.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.handle (72 samples, 14.29%)</title><rect x="99.0" y="723.0" width="168.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.0" y="734.0">org/springframework/we..</text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.handleInternal (72 samples, 14.29%)</title><rect x="99.0" y="707.0" width="168.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.0" y="718.0">org/springframework/we..</text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.invokeHandlerMethod (72 samples, 14.29%)</title><rect x="99.0" y="691.0" width="168.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.0" y="702.0">org/springframework/we..</text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.getDataBinderFactory (1 samples, 0.20%)</title><rect x="99.0" y="675.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.0" y="686.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.createDataBinderFactory (1 samples, 0.20%)</title><rect x="99.0" y="659.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="99.0" y="643.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.0" y="654.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="99.0" y="627.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="99.0" y="611.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.0" y="622.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="99.0" y="595.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.0" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="99.0" y="579.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.0" y="590.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="99.0" y="563.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.0" y="574.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="99.0" y="547.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="102.0" y="558.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.20%)</title><rect x="99.0" y="531.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.0" y="542.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.20%)</title><rect x="99.0" y="515.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.0" y="526.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.20%)</title><rect x="99.0" y="499.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.0" y="510.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.20%)</title><rect x="99.0" y="483.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="102.0" y="494.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.20%)</title><rect x="99.0" y="467.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.0" y="478.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.20%)</title><rect x="99.0" y="451.0" width="2.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="102.0" y="462.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.20%)</title><rect x="99.0" y="435.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="102.0" y="446.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, unsigned char, Thread*) (1 samples, 0.20%)</title><rect x="99.0" y="419.0" width="2.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="102.0" y="430.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, bool, Thread*) (1 samples, 0.20%)</title><rect x="99.0" y="403.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="102.0" y="414.0"></text>
</g>
<g>
<title>ClassFileParser::parseClassFile(Symbol*, ClassLoaderData*, Handle, KlassHandle, GrowableArray&lt;Handle&gt;*, TempNewSymbol&amp;, bool, Thread*) (1 samples, 0.20%)</title><rect x="99.0" y="387.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="102.0" y="398.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(Thread*) (1 samples, 0.20%)</title><rect x="99.0" y="371.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="102.0" y="382.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(int, Thread*) (1 samples, 0.20%)</title><rect x="99.0" y="355.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="102.0" y="366.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.20%)</title><rect x="99.0" y="339.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="102.0" y="350.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.invokeAndHandle (71 samples, 14.09%)</title><rect x="101.3" y="675.0" width="166.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.3" y="686.0">org/springframework/w..</text>
</g>
<g>
<title>org/springframework/web/method/support/HandlerMethodReturnValueHandlerComposite.handleReturnValue (2 samples, 0.40%)</title><rect x="101.3" y="659.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.3" y="670.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.handleReturnValue (2 samples, 0.40%)</title><rect x="101.3" y="643.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.3" y="654.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.writeWithMessageConverters (2 samples, 0.40%)</title><rect x="101.3" y="627.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="104.3" y="638.0"></text>
</g>
<g>
<title>org/springframework/http/converter/AbstractHttpMessageConverter.write (1 samples, 0.20%)</title><rect x="101.3" y="611.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.3" y="622.0"></text>
</g>
<g>
<title>org/springframework/http/converter/StringHttpMessageConverter.writeInternal (1 samples, 0.20%)</title><rect x="101.3" y="595.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="104.3" y="606.0"></text>
</g>
<g>
<title>org/springframework/http/converter/StringHttpMessageConverter.writeInternal (1 samples, 0.20%)</title><rect x="101.3" y="579.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.3" y="590.0"></text>
</g>
<g>
<title>org/springframework/http/server/ServletServerHttpResponse.getBody (1 samples, 0.20%)</title><rect x="101.3" y="563.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="104.3" y="574.0"></text>
</g>
<g>
<title>org/springframework/http/server/ServletServerHttpResponse.writeHeaders (1 samples, 0.20%)</title><rect x="101.3" y="547.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="104.3" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.20%)</title><rect x="101.3" y="531.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.3" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.20%)</title><rect x="101.3" y="515.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="104.3" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.20%)</title><rect x="101.3" y="499.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.3" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/497359413.invoke_MT (1 samples, 0.20%)</title><rect x="101.3" y="483.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.3" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$BMH/1530957251.reinvoke (1 samples, 0.20%)</title><rect x="101.3" y="467.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="104.3" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/278934944.invokeStatic_L6_L (1 samples, 0.20%)</title><rect x="101.3" y="451.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.3" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.20%)</title><rect x="101.3" y="435.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.3" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.20%)</title><rect x="101.3" y="419.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.3" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.20%)</title><rect x="101.3" y="403.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.3" y="414.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.defineAnonymousClass (1 samples, 0.20%)</title><rect x="101.3" y="387.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="104.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass (1 samples, 0.20%)</title><rect x="101.3" y="371.0" width="2.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="104.3" y="382.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, KlassHandle, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.20%)</title><rect x="101.3" y="355.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="104.3" y="366.0"></text>
</g>
<g>
<title>ClassFileParser::parseClassFile(Symbol*, ClassLoaderData*, Handle, KlassHandle, GrowableArray&lt;Handle&gt;*, TempNewSymbol&amp;, bool, Thread*) (1 samples, 0.20%)</title><rect x="101.3" y="339.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="104.3" y="350.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(Thread*) (1 samples, 0.20%)</title><rect x="101.3" y="323.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="104.3" y="334.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(int, Thread*) (1 samples, 0.20%)</title><rect x="101.3" y="307.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="104.3" y="318.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.20%)</title><rect x="101.3" y="291.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="104.3" y="302.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.getProducibleMediaTypes (1 samples, 0.20%)</title><rect x="103.7" y="611.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.7" y="622.0"></text>
</g>
<g>
<title>org/springframework/http/converter/AbstractGenericHttpMessageConverter.canWrite (1 samples, 0.20%)</title><rect x="103.7" y="595.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.7" y="606.0"></text>
</g>
<g>
<title>org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.canWrite (1 samples, 0.20%)</title><rect x="103.7" y="579.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.canSerialize (1 samples, 0.20%)</title><rect x="103.7" y="563.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="106.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._serializerProvider (1 samples, 0.20%)</title><rect x="103.7" y="547.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="106.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.createInstance (1 samples, 0.20%)</title><rect x="103.7" y="531.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.createInstance (1 samples, 0.20%)</title><rect x="103.7" y="515.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.&lt;init&gt; (1 samples, 0.20%)</title><rect x="103.7" y="499.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.&lt;init&gt; (1 samples, 0.20%)</title><rect x="103.7" y="483.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.&lt;init&gt; (1 samples, 0.20%)</title><rect x="103.7" y="467.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.getReadOnlyLookupMap (1 samples, 0.20%)</title><rect x="103.7" y="451.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache._makeReadOnlyLookupMap (1 samples, 0.20%)</title><rect x="103.7" y="435.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.7" y="446.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.20%)</title><rect x="103.7" y="419.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="106.7" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.20%)</title><rect x="103.7" y="403.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="106.7" y="414.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.20%)</title><rect x="103.7" y="387.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="106.7" y="398.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.20%)</title><rect x="103.7" y="371.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="106.7" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.20%)</title><rect x="103.7" y="355.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="106.7" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.20%)</title><rect x="103.7" y="339.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="106.7" y="350.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.20%)</title><rect x="103.7" y="323.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="106.7" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.20%)</title><rect x="103.7" y="307.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="106.7" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.20%)</title><rect x="103.7" y="291.0" width="2.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="106.7" y="302.0"></text>
</g>
<g>
<title>org/springframework/web/method/support/InvocableHandlerMethod.invokeForRequest (69 samples, 13.69%)</title><rect x="106.0" y="659.0" width="161.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.0" y="670.0">org/springframework/w..</text>
</g>
<g>
<title>org/springframework/web/method/support/InvocableHandlerMethod.doInvoke (69 samples, 13.69%)</title><rect x="106.0" y="643.0" width="161.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.0" y="654.0">org/springframework/w..</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (69 samples, 13.69%)</title><rect x="106.0" y="627.0" width="161.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.0" y="638.0">java/lang/reflect/Met..</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (69 samples, 13.69%)</title><rect x="106.0" y="611.0" width="161.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="109.0" y="622.0">sun/reflect/Delegatin..</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (69 samples, 13.69%)</title><rect x="106.0" y="595.0" width="161.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="109.0" y="606.0">sun/reflect/NativeMet..</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (69 samples, 13.69%)</title><rect x="106.0" y="579.0" width="161.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.0" y="590.0">sun/reflect/NativeMet..</text>
</g>
<g>
<title>com/hjc/learn/controller/WebFluxController.commonHandle (69 samples, 13.69%)</title><rect x="106.0" y="563.0" width="161.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="109.0" y="574.0">com/hjc/learn/control..</text>
</g>
<g>
<title>com/hjc/learn/controller/WebFluxController.doThing (69 samples, 13.69%)</title><rect x="106.0" y="547.0" width="161.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="109.0" y="558.0">com/hjc/learn/control..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.info (48 samples, 9.52%)</title><rect x="108.3" y="531.0" width="112.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.3" y="542.0">ch/qos/logback..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (48 samples, 9.52%)</title><rect x="108.3" y="515.0" width="112.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.3" y="526.0">ch/qos/logback..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (48 samples, 9.52%)</title><rect x="108.3" y="499.0" width="112.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.3" y="510.0">ch/qos/logback..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (47 samples, 9.33%)</title><rect x="108.3" y="483.0" width="110.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.3" y="494.0">ch/qos/logbac..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (47 samples, 9.33%)</title><rect x="108.3" y="467.0" width="110.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.3" y="478.0">ch/qos/logbac..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (47 samples, 9.33%)</title><rect x="108.3" y="451.0" width="110.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.3" y="462.0">ch/qos/logbac..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (47 samples, 9.33%)</title><rect x="108.3" y="435.0" width="110.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="111.3" y="446.0">ch/qos/logbac..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (46 samples, 9.13%)</title><rect x="108.3" y="419.0" width="107.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="111.3" y="430.0">ch/qos/logbac..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (45 samples, 8.93%)</title><rect x="108.3" y="403.0" width="105.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.3" y="414.0">ch/qos/logbac..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (4 samples, 0.79%)</title><rect x="108.3" y="387.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="111.3" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (4 samples, 0.79%)</title><rect x="108.3" y="371.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.3" y="382.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.write (4 samples, 0.79%)</title><rect x="108.3" y="355.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.3" y="366.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (4 samples, 0.79%)</title><rect x="108.3" y="339.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.3" y="350.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (4 samples, 0.79%)</title><rect x="108.3" y="323.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.3" y="334.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (4 samples, 0.79%)</title><rect x="108.3" y="307.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="111.3" y="318.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (4 samples, 0.79%)</title><rect x="108.3" y="291.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="111.3" y="302.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (4 samples, 0.79%)</title><rect x="108.3" y="275.0" width="9.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="111.3" y="286.0"></text>
</g>
<g>
<title>writeBytes (4 samples, 0.79%)</title><rect x="108.3" y="259.0" width="9.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="111.3" y="270.0"></text>
</g>
<g>
<title>write (4 samples, 0.79%)</title><rect x="108.3" y="243.0" width="9.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="111.3" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (41 samples, 8.13%)</title><rect x="117.7" y="387.0" width="96.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.7" y="398.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (37 samples, 7.34%)</title><rect x="117.7" y="371.0" width="86.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="120.7" y="382.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (37 samples, 7.34%)</title><rect x="117.7" y="355.0" width="86.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="120.7" y="366.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/core/pattern/PatternLayoutBase.writeLoopOnConverters (37 samples, 7.34%)</title><rect x="117.7" y="339.0" width="86.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.7" y="350.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/core/pattern/FormattingConverter.write (31 samples, 6.15%)</title><rect x="117.7" y="323.0" width="72.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.7" y="334.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/core/pattern/CompositeConverter.convert (30 samples, 5.95%)</title><rect x="117.7" y="307.0" width="70.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="120.7" y="318.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/core/pattern/FormattingConverter.write (15 samples, 2.98%)</title><rect x="117.7" y="291.0" width="35.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.7" y="302.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/DateConverter.convert (6 samples, 1.19%)</title><rect x="117.7" y="275.0" width="14.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="120.7" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/DateConverter.convert (6 samples, 1.19%)</title><rect x="117.7" y="259.0" width="14.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="120.7" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (5 samples, 0.99%)</title><rect x="120.0" y="243.0" width="11.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.0" y="254.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (5 samples, 0.99%)</title><rect x="120.0" y="227.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.0" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.&lt;init&gt; (1 samples, 0.20%)</title><rect x="120.0" y="211.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.0" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.20%)</title><rect x="120.0" y="195.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.0" y="206.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (4 samples, 0.79%)</title><rect x="122.4" y="211.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.4" y="222.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (4 samples, 0.79%)</title><rect x="122.4" y="195.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (1 samples, 0.20%)</title><rect x="122.4" y="179.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.4" y="190.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.20%)</title><rect x="122.4" y="163.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="125.4" y="174.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.20%)</title><rect x="122.4" y="147.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="125.4" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.20%)</title><rect x="122.4" y="131.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="125.4" y="142.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (3 samples, 0.60%)</title><rect x="124.7" y="179.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.7" y="190.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.zeroPaddingNumber (1 samples, 0.20%)</title><rect x="124.7" y="163.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.7" y="174.0"></text>
</g>
<g>
<title>java/util/Calendar.getDisplayName (2 samples, 0.40%)</title><rect x="127.1" y="163.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="130.1" y="174.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getInstance (1 samples, 0.20%)</title><rect x="129.4" y="147.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="132.4" y="158.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getProviderInstance (1 samples, 0.20%)</title><rect x="129.4" y="131.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.4" y="142.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DateFormatSymbolsProviderImpl.getInstance (1 samples, 0.20%)</title><rect x="129.4" y="115.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.4" y="126.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.&lt;init&gt; (1 samples, 0.20%)</title><rect x="129.4" y="99.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.4" y="110.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.initializeData (1 samples, 0.20%)</title><rect x="129.4" y="83.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.4" y="94.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.copyMembers (1 samples, 0.20%)</title><rect x="129.4" y="67.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.4" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.20%)</title><rect x="129.4" y="51.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="132.4" y="62.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/NamedConverter.convert (6 samples, 1.19%)</title><rect x="131.7" y="275.0" width="14.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.7" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/NamedConverter.convert (5 samples, 0.99%)</title><rect x="131.7" y="259.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.7" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/TargetLengthBasedClassNameAbbreviator.abbreviate (5 samples, 0.99%)</title><rect x="131.7" y="243.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.20%)</title><rect x="136.4" y="227.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.4" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.40%)</title><rect x="138.8" y="227.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="141.8" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.40%)</title><rect x="138.8" y="211.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.8" y="222.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/TargetLengthBasedClassNameAbbreviator.abbreviate (1 samples, 0.20%)</title><rect x="143.5" y="259.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.5" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/SpacePadder.rightPad (3 samples, 0.60%)</title><rect x="145.8" y="275.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.8" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/SpacePadder.spacePad (2 samples, 0.40%)</title><rect x="145.8" y="259.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.8" y="270.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.40%)</title><rect x="145.8" y="243.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.8" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.40%)</title><rect x="145.8" y="227.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.8" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.40%)</title><rect x="145.8" y="211.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="148.8" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.40%)</title><rect x="145.8" y="195.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.8" y="206.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.20%)</title><rect x="150.5" y="259.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.5" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.20%)</title><rect x="150.5" y="243.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.5" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (5 samples, 0.99%)</title><rect x="152.8" y="291.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.40%)</title><rect x="159.8" y="275.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="162.8" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.40%)</title><rect x="159.8" y="259.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.8" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="162.2" y="243.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="165.2" y="254.0"></text>
</g>
<g>
<title>org/springframework/boot/logging/logback/ColorConverter.transform (10 samples, 1.98%)</title><rect x="164.5" y="291.0" width="23.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.5" y="302.0">o..</text>
</g>
<g>
<title>org/springframework/boot/logging/logback/ColorConverter.transform (10 samples, 1.98%)</title><rect x="164.5" y="275.0" width="23.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.5" y="286.0">o..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.60%)</title><rect x="164.5" y="259.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.5" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.60%)</title><rect x="164.5" y="243.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.5" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.60%)</title><rect x="164.5" y="227.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="167.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.40%)</title><rect x="166.9" y="211.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.9" y="222.0"></text>
</g>
<g>
<title>org/springframework/boot/logging/logback/ColorConverter.toAnsiString (7 samples, 1.39%)</title><rect x="171.5" y="259.0" width="16.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.5" y="270.0"></text>
</g>
<g>
<title>org/springframework/boot/ansi/AnsiOutput.toString (6 samples, 1.19%)</title><rect x="173.9" y="243.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.40%)</title><rect x="180.9" y="227.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.9" y="238.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="183.3" y="211.0" width="2.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="186.3" y="222.0"></text>
</g>
<g>
<title>org/springframework/boot/ansi/AnsiOutput.buildDisabled (1 samples, 0.20%)</title><rect x="185.6" y="227.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.6" y="238.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.20%)</title><rect x="187.9" y="307.0" width="2.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="190.9" y="318.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (4 samples, 0.79%)</title><rect x="190.3" y="323.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.3" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (4 samples, 0.79%)</title><rect x="190.3" y="307.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.3" y="318.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.40%)</title><rect x="199.6" y="323.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.20%)</title><rect x="199.6" y="307.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.6" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.20%)</title><rect x="199.6" y="291.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.6" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="199.6" y="275.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="202.6" y="286.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="202.0" y="307.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="205.0" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (3 samples, 0.60%)</title><rect x="204.3" y="371.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.3" y="382.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.60%)</title><rect x="204.3" y="355.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.3" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.60%)</title><rect x="204.3" y="339.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.3" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.60%)</title><rect x="204.3" y="323.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding$StringEncoder.encode (3 samples, 0.60%)</title><rect x="204.3" y="307.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="207.3" y="318.0"></text>
</g>
<g>
<title>java/lang/StringCoding.access$300 (1 samples, 0.20%)</title><rect x="209.0" y="291.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (1 samples, 0.20%)</title><rect x="209.0" y="275.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.0" y="286.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="209.0" y="259.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="212.0" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/FormattingConverter.write (1 samples, 0.20%)</title><rect x="211.3" y="371.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="214.3" y="382.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.20%)</title><rect x="213.7" y="403.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="216.7" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.20%)</title><rect x="216.0" y="419.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.0" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.20%)</title><rect x="216.0" y="403.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.0" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.20%)</title><rect x="216.0" y="387.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.0" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.20%)</title><rect x="216.0" y="371.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.0" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.setMarker (1 samples, 0.20%)</title><rect x="218.4" y="483.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.4" y="494.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.20%)</title><rect x="220.7" y="531.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.7" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.20%)</title><rect x="220.7" y="515.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.7" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (19 samples, 3.77%)</title><rect x="223.1" y="531.0" width="44.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.1" y="542.0">java..</text>
</g>
<g>
<title>JVM_Sleep (19 samples, 3.77%)</title><rect x="223.1" y="515.0" width="44.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="226.1" y="526.0">JVM_..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (19 samples, 3.77%)</title><rect x="223.1" y="499.0" width="44.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="226.1" y="510.0">os::..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (18 samples, 3.57%)</title><rect x="223.1" y="483.0" width="42.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="226.1" y="494.0">os::..</text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.20%)</title><rect x="223.1" y="467.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="226.1" y="478.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 3.37%)</title><rect x="225.4" y="467.0" width="39.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="228.4" y="478.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.20%)</title><rect x="265.2" y="483.0" width="2.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="268.2" y="494.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/FrameworkServlet.publishRequestHandledEvent (1 samples, 0.20%)</title><rect x="267.5" y="755.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.5" y="766.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/RequestFacade.getRemoteAddr (1 samples, 0.20%)</title><rect x="267.5" y="739.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.5" y="750.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/Request.getRemoteAddr (1 samples, 0.20%)</title><rect x="267.5" y="723.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.5" y="734.0"></text>
</g>
<g>
<title>org/apache/coyote/Request.action (1 samples, 0.20%)</title><rect x="267.5" y="707.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.5" y="718.0"></text>
</g>
<g>
<title>org/apache/coyote/AbstractProcessor.action (1 samples, 0.20%)</title><rect x="267.5" y="691.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.5" y="702.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/net/SocketWrapperBase.getRemoteAddr (1 samples, 0.20%)</title><rect x="267.5" y="675.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="270.5" y="686.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/net/NioEndpoint$NioSocketWrapper.populateRemoteAddr (1 samples, 0.20%)</title><rect x="267.5" y="659.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.5" y="670.0"></text>
</g>
<g>
<title>java/net/Inet6Address.getHostAddress (1 samples, 0.20%)</title><rect x="267.5" y="643.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.5" y="654.0"></text>
</g>
<g>
<title>java/net/Inet6Address$Inet6AddressHolder.getHostAddress (1 samples, 0.20%)</title><rect x="267.5" y="627.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.5" y="638.0"></text>
</g>
<g>
<title>java/net/Inet6Address.numericToTextFormat (1 samples, 0.20%)</title><rect x="267.5" y="611.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.5" y="622.0"></text>
</g>
<g>
<title>org/springframework/web/filter/RequestContextFilter.initContextHolders (1 samples, 0.20%)</title><rect x="269.9" y="915.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.9" y="926.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/RequestFacade.getLocale (1 samples, 0.20%)</title><rect x="269.9" y="899.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.9" y="910.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/Request.getLocale (1 samples, 0.20%)</title><rect x="269.9" y="883.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.9" y="894.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/Request.parseLocales (1 samples, 0.20%)</title><rect x="269.9" y="867.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.9" y="878.0"></text>
</g>
<g>
<title>org/apache/catalina/connector/Request.parseLocalesHeader (1 samples, 0.20%)</title><rect x="269.9" y="851.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.9" y="862.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/http/parser/AcceptLanguage.parse (1 samples, 0.20%)</title><rect x="269.9" y="835.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.9" y="846.0"></text>
</g>
<g>
<title>java/util/Locale.forLanguageTag (1 samples, 0.20%)</title><rect x="269.9" y="819.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.9" y="830.0"></text>
</g>
<g>
<title>sun/util/locale/InternalLocaleBuilder.getBaseLocale (1 samples, 0.20%)</title><rect x="269.9" y="803.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.9" y="814.0"></text>
</g>
<g>
<title>sun/util/locale/BaseLocale.getInstance (1 samples, 0.20%)</title><rect x="269.9" y="787.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.9" y="798.0"></text>
</g>
<g>
<title>org/springframework/web/filter/OncePerRequestFilter.skipDispatch (1 samples, 0.20%)</title><rect x="272.2" y="1123.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.2" y="1134.0"></text>
</g>
<g>
<title>org/springframework/web/filter/OncePerRequestFilter.isAsyncDispatch (1 samples, 0.20%)</title><rect x="272.2" y="1107.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.2" y="1118.0"></text>
</g>
<g>
<title>org/springframework/web/context/request/async/WebAsyncUtils.getAsyncManager (1 samples, 0.20%)</title><rect x="272.2" y="1091.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.2" y="1102.0"></text>
</g>
<g>
<title>org/springframework/web/context/request/async/WebAsyncManager.&lt;clinit&gt; (1 samples, 0.20%)</title><rect x="272.2" y="1075.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="272.2" y="1059.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="275.2" y="1070.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="272.2" y="1043.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="272.2" y="1027.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.2" y="1038.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="272.2" y="1011.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.2" y="1022.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="272.2" y="995.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.2" y="1006.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="272.2" y="979.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.2" y="990.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="272.2" y="963.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.2" y="974.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.20%)</title><rect x="272.2" y="947.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.2" y="958.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.20%)</title><rect x="272.2" y="931.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.2" y="942.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.20%)</title><rect x="272.2" y="915.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.2" y="926.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.20%)</title><rect x="272.2" y="899.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.2" y="910.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.20%)</title><rect x="272.2" y="883.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.2" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.20%)</title><rect x="272.2" y="867.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="275.2" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.20%)</title><rect x="272.2" y="851.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="275.2" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, unsigned char, Thread*) (1 samples, 0.20%)</title><rect x="272.2" y="835.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="275.2" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, bool, Thread*) (1 samples, 0.20%)</title><rect x="272.2" y="819.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="275.2" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parseClassFile(Symbol*, ClassLoaderData*, Handle, KlassHandle, GrowableArray&lt;Handle&gt;*, TempNewSymbol&amp;, bool, Thread*) (1 samples, 0.20%)</title><rect x="272.2" y="803.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="275.2" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(Thread*) (1 samples, 0.20%)</title><rect x="272.2" y="787.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="275.2" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(int, Thread*) (1 samples, 0.20%)</title><rect x="272.2" y="771.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="275.2" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.20%)</title><rect x="272.2" y="755.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="275.2" y="766.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.20%)</title><rect x="272.2" y="739.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="275.2" y="750.0"></text>
</g>
<g>
<title>org/apache/catalina/core/ApplicationFilterFactory.createFilterChain (1 samples, 0.20%)</title><rect x="274.6" y="1171.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.6" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::quicken_io_cc(JavaThread*) (1 samples, 0.20%)</title><rect x="274.6" y="1155.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="277.6" y="1166.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.20%)</title><rect x="274.6" y="1139.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="277.6" y="1150.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle, int, Thread*) (1 samples, 0.20%)</title><rect x="274.6" y="1123.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="277.6" y="1134.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.20%)</title><rect x="274.6" y="1107.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="277.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/catalina/core/StandardWrapper.allocate (4 samples, 0.79%)</title><rect x="276.9" y="1171.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/catalina/core/StandardWrapper.initServlet (4 samples, 0.79%)</title><rect x="276.9" y="1155.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.9" y="1166.0"></text>
</g>
<g>
<title>javax/servlet/GenericServlet.init (4 samples, 0.79%)</title><rect x="276.9" y="1139.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.9" y="1150.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/HttpServletBean.init (4 samples, 0.79%)</title><rect x="276.9" y="1123.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="276.9" y="1107.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.9" y="1118.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="276.9" y="1091.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="276.9" y="1075.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.9" y="1086.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="276.9" y="1059.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.9" y="1070.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="276.9" y="1043.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.9" y="1054.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="276.9" y="1027.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="1038.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="276.9" y="1011.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.9" y="1022.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.20%)</title><rect x="276.9" y="995.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.9" y="1006.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.20%)</title><rect x="276.9" y="979.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.9" y="990.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.20%)</title><rect x="276.9" y="963.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.20%)</title><rect x="276.9" y="947.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.20%)</title><rect x="276.9" y="931.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.9" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.20%)</title><rect x="276.9" y="915.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="279.9" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.20%)</title><rect x="276.9" y="899.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="279.9" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, unsigned char, Thread*) (1 samples, 0.20%)</title><rect x="276.9" y="883.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="279.9" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, bool, Thread*) (1 samples, 0.20%)</title><rect x="276.9" y="867.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="279.9" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parseClassFile(Symbol*, ClassLoaderData*, Handle, KlassHandle, GrowableArray&lt;Handle&gt;*, TempNewSymbol&amp;, bool, Thread*) (1 samples, 0.20%)</title><rect x="276.9" y="851.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="279.9" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(Thread*) (1 samples, 0.20%)</title><rect x="276.9" y="835.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="279.9" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(int, Thread*) (1 samples, 0.20%)</title><rect x="276.9" y="819.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="279.9" y="830.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.20%)</title><rect x="276.9" y="803.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="279.9" y="814.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.20%)</title><rect x="276.9" y="787.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="279.9" y="798.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/FrameworkServlet.initServletBean (3 samples, 0.60%)</title><rect x="279.2" y="1107.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.2" y="1118.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/FrameworkServlet.initWebApplicationContext (3 samples, 0.60%)</title><rect x="279.2" y="1091.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.2" y="1102.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.onRefresh (3 samples, 0.60%)</title><rect x="279.2" y="1075.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.2" y="1086.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.initStrategies (3 samples, 0.60%)</title><rect x="279.2" y="1059.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.2" y="1070.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.initFlashMapManager (1 samples, 0.20%)</title><rect x="279.2" y="1043.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.2" y="1054.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.getDefaultStrategy (1 samples, 0.20%)</title><rect x="279.2" y="1027.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.2" y="1038.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.getDefaultStrategies (1 samples, 0.20%)</title><rect x="279.2" y="1011.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.2" y="1022.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.createDefaultStrategy (1 samples, 0.20%)</title><rect x="279.2" y="995.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.2" y="1006.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.createBean (1 samples, 0.20%)</title><rect x="279.2" y="979.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.2" y="990.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.createBean (1 samples, 0.20%)</title><rect x="279.2" y="963.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.2" y="974.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.doCreateBean (1 samples, 0.20%)</title><rect x="279.2" y="947.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.2" y="958.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.createBeanInstance (1 samples, 0.20%)</title><rect x="279.2" y="931.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.2" y="942.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors (1 samples, 0.20%)</title><rect x="279.2" y="915.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.2" y="926.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors (1 samples, 0.20%)</title><rect x="279.2" y="899.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.2" y="910.0"></text>
</g>
<g>
<title>org/springframework/util/ReflectionUtils.doWithLocalMethods (1 samples, 0.20%)</title><rect x="279.2" y="883.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.2" y="894.0"></text>
</g>
<g>
<title>org/springframework/util/ReflectionUtils.getDeclaredMethods (1 samples, 0.20%)</title><rect x="279.2" y="867.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.2" y="878.0"></text>
</g>
<g>
<title>java/lang/Class.getDeclaredMethods (1 samples, 0.20%)</title><rect x="279.2" y="851.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredMethods (1 samples, 0.20%)</title><rect x="279.2" y="835.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Class.getDeclaredMethods0 (1 samples, 0.20%)</title><rect x="279.2" y="819.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.2" y="830.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="279.2" y="803.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.2" y="814.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="279.2" y="787.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.2" y="798.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="279.2" y="771.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="282.2" y="782.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="279.2" y="755.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.2" y="766.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="279.2" y="739.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.2" y="750.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="279.2" y="723.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.2" y="734.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="279.2" y="707.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.2" y="718.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.20%)</title><rect x="279.2" y="691.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.2" y="702.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.20%)</title><rect x="279.2" y="675.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.2" y="686.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.20%)</title><rect x="279.2" y="659.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.20%)</title><rect x="279.2" y="643.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.20%)</title><rect x="279.2" y="627.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.2" y="638.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.20%)</title><rect x="279.2" y="611.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="282.2" y="622.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.20%)</title><rect x="279.2" y="595.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="282.2" y="606.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, unsigned char, Thread*) (1 samples, 0.20%)</title><rect x="279.2" y="579.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="282.2" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, bool, Thread*) (1 samples, 0.20%)</title><rect x="279.2" y="563.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="282.2" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parseClassFile(Symbol*, ClassLoaderData*, Handle, KlassHandle, GrowableArray&lt;Handle&gt;*, TempNewSymbol&amp;, bool, Thread*) (1 samples, 0.20%)</title><rect x="279.2" y="547.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="282.2" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(Thread*) (1 samples, 0.20%)</title><rect x="279.2" y="531.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="282.2" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol*, Symbol*, Thread*) (1 samples, 0.20%)</title><rect x="279.2" y="515.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="282.2" y="526.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.20%)</title><rect x="279.2" y="499.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="282.2" y="510.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.initHandlerMappings (1 samples, 0.20%)</title><rect x="281.6" y="1043.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.6" y="1054.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/BeanFactoryUtils.beansOfTypeIncludingAncestors (1 samples, 0.20%)</title><rect x="281.6" y="1027.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.6" y="1038.0"></text>
</g>
<g>
<title>org/springframework/context/support/AbstractApplicationContext.getBeansOfType (1 samples, 0.20%)</title><rect x="281.6" y="1011.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.6" y="1022.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/DefaultListableBeanFactory.getBeansOfType (1 samples, 0.20%)</title><rect x="281.6" y="995.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.6" y="1006.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/DefaultListableBeanFactory.getBeanNamesForType (1 samples, 0.20%)</title><rect x="281.6" y="979.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.6" y="990.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/DefaultListableBeanFactory.doGetBeanNamesForType (1 samples, 0.20%)</title><rect x="281.6" y="963.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.6" y="974.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.containsSingleton (1 samples, 0.20%)</title><rect x="281.6" y="947.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.containsKey (1 samples, 0.20%)</title><rect x="281.6" y="931.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.20%)</title><rect x="281.6" y="915.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.6" y="926.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.initLocaleResolver (1 samples, 0.20%)</title><rect x="283.9" y="1043.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.9" y="1054.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.getDefaultStrategy (1 samples, 0.20%)</title><rect x="283.9" y="1027.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.9" y="1038.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.getDefaultStrategies (1 samples, 0.20%)</title><rect x="283.9" y="1011.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.9" y="1022.0"></text>
</g>
<g>
<title>org/springframework/web/servlet/DispatcherServlet.createDefaultStrategy (1 samples, 0.20%)</title><rect x="283.9" y="995.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.9" y="1006.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.createBean (1 samples, 0.20%)</title><rect x="283.9" y="979.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.9" y="990.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.createBean (1 samples, 0.20%)</title><rect x="283.9" y="963.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.9" y="974.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.doCreateBean (1 samples, 0.20%)</title><rect x="283.9" y="947.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.9" y="958.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.initializeBean (1 samples, 0.20%)</title><rect x="283.9" y="931.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.9" y="942.0"></text>
</g>
<g>
<title>org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization (1 samples, 0.20%)</title><rect x="283.9" y="915.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.9" y="926.0"></text>
</g>
<g>
<title>org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.postProcessAfterInitialization (1 samples, 0.20%)</title><rect x="283.9" y="899.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.9" y="910.0"></text>
</g>
<g>
<title>org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.wrapIfNecessary (1 samples, 0.20%)</title><rect x="283.9" y="883.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.9" y="894.0"></text>
</g>
<g>
<title>org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean (1 samples, 0.20%)</title><rect x="283.9" y="867.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.9" y="878.0"></text>
</g>
<g>
<title>org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.findEligibleAdvisors (1 samples, 0.20%)</title><rect x="283.9" y="851.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.9" y="862.0"></text>
</g>
<g>
<title>org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply (1 samples, 0.20%)</title><rect x="283.9" y="835.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.9" y="846.0"></text>
</g>
<g>
<title>org/springframework/aop/support/AopUtils.findAdvisorsThatCanApply (1 samples, 0.20%)</title><rect x="283.9" y="819.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.9" y="830.0"></text>
</g>
<g>
<title>org/springframework/aop/support/AopUtils.canApply (1 samples, 0.20%)</title><rect x="283.9" y="803.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.9" y="814.0"></text>
</g>
<g>
<title>org/springframework/aop/support/AopUtils.canApply (1 samples, 0.20%)</title><rect x="283.9" y="787.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.9" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (1 samples, 0.20%)</title><rect x="283.9" y="771.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="286.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.20%)</title><rect x="283.9" y="755.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.9" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.20%)</title><rect x="283.9" y="739.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.9" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.20%)</title><rect x="283.9" y="723.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="286.9" y="734.0"></text>
</g>
<g>
<title>org/apache/coyote/http11/AbstractHttp11Protocol.createProcessor (4 samples, 0.79%)</title><rect x="286.3" y="1315.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/coyote/http11/Http11Processor.&lt;init&gt; (4 samples, 0.79%)</title><rect x="286.3" y="1299.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="286.3" y="1283.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.3" y="1294.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="286.3" y="1267.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="286.3" y="1251.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="286.3" y="1235.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findBootstrapClassOrNull (1 samples, 0.20%)</title><rect x="286.3" y="1219.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findBootstrapClass (1 samples, 0.20%)</title><rect x="286.3" y="1203.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.3" y="1214.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.20%)</title><rect x="286.3" y="1187.0" width="2.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="289.3" y="1198.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.20%)</title><rect x="286.3" y="1171.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="289.3" y="1182.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.20%)</title><rect x="286.3" y="1155.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="289.3" y="1166.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.20%)</title><rect x="286.3" y="1139.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="289.3" y="1150.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.20%)</title><rect x="286.3" y="1123.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="289.3" y="1134.0"></text>
</g>
<g>
<title>ClassLoader::load_classfile(Symbol*, Thread*) (1 samples, 0.20%)</title><rect x="286.3" y="1107.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="289.3" y="1118.0"></text>
</g>
<g>
<title>_platform_strncpy (1 samples, 0.20%)</title><rect x="286.3" y="1091.0" width="2.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="289.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/coyote/AbstractProcessor.&lt;init&gt; (1 samples, 0.20%)</title><rect x="288.6" y="1283.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/coyote/Request.&lt;init&gt; (1 samples, 0.20%)</title><rect x="288.6" y="1267.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.6" y="1278.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.20%)</title><rect x="288.6" y="1251.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="291.6" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.20%)</title><rect x="288.6" y="1235.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="291.6" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(instanceKlassHandle, Thread*) (1 samples, 0.20%)</title><rect x="288.6" y="1219.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="291.6" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.20%)</title><rect x="288.6" y="1203.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="291.6" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.20%)</title><rect x="288.6" y="1187.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="291.6" y="1198.0"></text>
</g>
<g>
<title>Verifier::verify(instanceKlassHandle, Verifier::Mode, bool, Thread*) (1 samples, 0.20%)</title><rect x="288.6" y="1171.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="291.6" y="1182.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.20%)</title><rect x="288.6" y="1155.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="291.6" y="1166.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle, Thread*) (1 samples, 0.20%)</title><rect x="288.6" y="1139.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="291.6" y="1150.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle, StackMapTable*, Thread*) (1 samples, 0.20%)</title><rect x="288.6" y="1123.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="291.6" y="1134.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.20%)</title><rect x="288.6" y="1107.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="291.6" y="1118.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_type(char const*, long) (1 samples, 0.20%)</title><rect x="288.6" y="1091.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="291.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/coyote/http11/Http11InputBuffer.&lt;clinit&gt; (1 samples, 0.20%)</title><rect x="291.0" y="1283.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.20%)</title><rect x="291.0" y="1267.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.20%)</title><rect x="291.0" y="1251.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="294.0" y="1262.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.20%)</title><rect x="291.0" y="1235.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="294.0" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.20%)</title><rect x="291.0" y="1219.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="294.0" y="1230.0"></text>
</g>
<g>
<title>CompiledIC::set_to_megamorphic(CallInfo*, Bytecodes::Code, Thread*) (1 samples, 0.20%)</title><rect x="291.0" y="1203.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="294.0" y="1214.0"></text>
</g>
<g>
<title>VtableStubs::find_stub(bool, int) (1 samples, 0.20%)</title><rect x="291.0" y="1187.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="294.0" y="1198.0"></text>
</g>
<g>
<title>VtableStubs::lookup(bool, int) (1 samples, 0.20%)</title><rect x="291.0" y="1171.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="294.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/http/parser/HttpParser.&lt;clinit&gt; (1 samples, 0.20%)</title><rect x="293.3" y="1283.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/res/StringManager.getManager (1 samples, 0.20%)</title><rect x="293.3" y="1267.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/res/StringManager.getManager (1 samples, 0.20%)</title><rect x="293.3" y="1251.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/res/StringManager.getManager (1 samples, 0.20%)</title><rect x="293.3" y="1235.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/res/StringManager.&lt;init&gt; (1 samples, 0.20%)</title><rect x="293.3" y="1219.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.3" y="1230.0"></text>
</g>
<g>
<title>java/util/ResourceBundle.getBundle (1 samples, 0.20%)</title><rect x="293.3" y="1203.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.3" y="1214.0"></text>
</g>
<g>
<title>java/util/ResourceBundle.getBundleImpl (1 samples, 0.20%)</title><rect x="293.3" y="1187.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.3" y="1198.0"></text>
</g>
<g>
<title>java/util/ResourceBundle.findBundle (1 samples, 0.20%)</title><rect x="293.3" y="1171.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.3" y="1182.0"></text>
</g>
<g>
<title>java/util/ResourceBundle.findBundle (1 samples, 0.20%)</title><rect x="293.3" y="1155.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.3" y="1166.0"></text>
</g>
<g>
<title>java/util/ResourceBundle.findBundle (1 samples, 0.20%)</title><rect x="293.3" y="1139.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.3" y="1150.0"></text>
</g>
<g>
<title>java/util/ResourceBundle.findBundle (1 samples, 0.20%)</title><rect x="293.3" y="1123.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.3" y="1134.0"></text>
</g>
<g>
<title>java/util/ResourceBundle.findBundle (1 samples, 0.20%)</title><rect x="293.3" y="1107.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.3" y="1118.0"></text>
</g>
<g>
<title>java/util/ResourceBundle.loadBundle (1 samples, 0.20%)</title><rect x="293.3" y="1091.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.3" y="1102.0"></text>
</g>
<g>
<title>java/util/ResourceBundle$Control.newBundle (1 samples, 0.20%)</title><rect x="293.3" y="1075.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="293.3" y="1059.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.3" y="1070.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (1 samples, 0.20%)</title><rect x="293.3" y="1043.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.20%)</title><rect x="293.3" y="1027.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.3" y="1038.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.20%)</title><rect x="293.3" y="1011.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.3" y="1022.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.20%)</title><rect x="293.3" y="995.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.3" y="1006.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="293.3" y="979.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.3" y="990.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.20%)</title><rect x="293.3" y="963.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.3" y="974.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath.getResource (1 samples, 0.20%)</title><rect x="293.3" y="947.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.3" y="958.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$JarLoader.getResource (1 samples, 0.20%)</title><rect x="293.3" y="931.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.3" y="942.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getJarEntry (1 samples, 0.20%)</title><rect x="293.3" y="915.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.3" y="926.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getEntry (1 samples, 0.20%)</title><rect x="293.3" y="899.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.3" y="910.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.getEntry (1 samples, 0.20%)</title><rect x="293.3" y="883.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.3" y="894.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.getEntry (1 samples, 0.20%)</title><rect x="293.3" y="867.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.3" y="878.0"></text>
</g>
<g>
<title>Java_java_util_zip_ZipFile_getEntry (1 samples, 0.20%)</title><rect x="293.3" y="851.0" width="2.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="296.3" y="862.0"></text>
</g>
<g>
<title>ZIP_GetEntry2 (1 samples, 0.20%)</title><rect x="293.3" y="835.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="296.3" y="846.0"></text>
</g>
<g>
<title>org/apache/tomcat/util/net/NioBlockingSelector$BlockPoller.run (1 samples, 0.20%)</title><rect x="295.6" y="1427.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.6" y="1438.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.20%)</title><rect x="295.6" y="1411.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.6" y="1422.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.20%)</title><rect x="295.6" y="1395.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.6" y="1406.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.20%)</title><rect x="295.6" y="1379.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.6" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.20%)</title><rect x="295.6" y="1363.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.6" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.20%)</title><rect x="295.6" y="1347.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.6" y="1358.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.20%)</title><rect x="295.6" y="1331.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="298.6" y="1342.0"></text>
</g>
<g>
<title>thread_start (381 samples, 75.60%)</title><rect x="298.0" y="1427.0" width="892.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="301.0" y="1438.0">thread_start</text>
</g>
<g>
<title>_pthread_start (381 samples, 75.60%)</title><rect x="298.0" y="1411.0" width="892.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="301.0" y="1422.0">_pthread_start</text>
</g>
<g>
<title>java_start(Thread*) (381 samples, 75.60%)</title><rect x="298.0" y="1395.0" width="892.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="301.0" y="1406.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::run() (368 samples, 73.02%)</title><rect x="298.0" y="1379.0" width="861.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="301.0" y="1390.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (368 samples, 73.02%)</title><rect x="298.0" y="1363.0" width="861.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="301.0" y="1374.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (364 samples, 72.22%)</title><rect x="298.0" y="1347.0" width="852.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="301.0" y="1358.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (358 samples, 71.03%)</title><rect x="298.0" y="1331.0" width="838.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="301.0" y="1342.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (340 samples, 67.46%)</title><rect x="298.0" y="1315.0" width="796.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="301.0" y="1326.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (340 samples, 67.46%)</title><rect x="298.0" y="1299.0" width="796.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="301.0" y="1310.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (3 samples, 0.60%)</title><rect x="298.0" y="1283.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="301.0" y="1294.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (3 samples, 0.60%)</title><rect x="298.0" y="1267.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="301.0" y="1278.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 0.60%)</title><rect x="298.0" y="1251.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="301.0" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (3 samples, 0.60%)</title><rect x="298.0" y="1235.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="301.0" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 0.60%)</title><rect x="298.0" y="1219.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="301.0" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.60%)</title><rect x="298.0" y="1203.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="301.0" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.60%)</title><rect x="298.0" y="1187.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="301.0" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (3 samples, 0.60%)</title><rect x="298.0" y="1171.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="301.0" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="298.0" y="1155.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="301.0" y="1166.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.20%)</title><rect x="298.0" y="1139.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="301.0" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.20%)</title><rect x="298.0" y="1123.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="301.0" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.20%)</title><rect x="298.0" y="1107.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="301.0" y="1118.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.20%)</title><rect x="298.0" y="1091.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="301.0" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="298.0" y="1075.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="301.0" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="298.0" y="1059.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="301.0" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.20%)</title><rect x="298.0" y="1043.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="301.0" y="1054.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.20%)</title><rect x="298.0" y="1027.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="301.0" y="1038.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.20%)</title><rect x="298.0" y="1011.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="301.0" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 0.40%)</title><rect x="300.3" y="1155.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="303.3" y="1166.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.40%)</title><rect x="300.3" y="1139.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="303.3" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.40%)</title><rect x="300.3" y="1123.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="303.3" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.40%)</title><rect x="300.3" y="1107.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="303.3" y="1118.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.20%)</title><rect x="300.3" y="1091.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="303.3" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.20%)</title><rect x="300.3" y="1075.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="303.3" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.20%)</title><rect x="300.3" y="1059.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="303.3" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.20%)</title><rect x="300.3" y="1043.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="303.3" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.20%)</title><rect x="300.3" y="1027.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="303.3" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.20%)</title><rect x="300.3" y="1011.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="303.3" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.20%)</title><rect x="300.3" y="995.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="303.3" y="1006.0"></text>
</g>
<g>
<title>FieldType::get_array_info(Symbol*, FieldArrayInfo&amp;, Thread*) (1 samples, 0.20%)</title><rect x="300.3" y="979.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="303.3" y="990.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.20%)</title><rect x="300.3" y="963.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="303.3" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="302.7" y="1091.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="305.7" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="302.7" y="1075.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="305.7" y="1086.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="302.7" y="1059.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="305.7" y="1070.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.20%)</title><rect x="302.7" y="1043.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.7" y="1054.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.20%)</title><rect x="302.7" y="1027.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="305.7" y="1038.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.20%)</title><rect x="302.7" y="1011.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="305.7" y="1022.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.20%)</title><rect x="302.7" y="995.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="305.7" y="1006.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (267 samples, 52.98%)</title><rect x="305.0" y="1283.0" width="625.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="308.0" y="1294.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (7 samples, 1.39%)</title><rect x="305.0" y="1267.0" width="16.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="308.0" y="1278.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.60%)</title><rect x="305.0" y="1251.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="308.0" y="1262.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.20%)</title><rect x="309.7" y="1235.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="312.7" y="1246.0"></text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.20%)</title><rect x="309.7" y="1219.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="312.7" y="1230.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (4 samples, 0.79%)</title><rect x="312.0" y="1251.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="315.0" y="1262.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.20%)</title><rect x="312.0" y="1235.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="315.0" y="1246.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.20%)</title><rect x="312.0" y="1219.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="315.0" y="1230.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.20%)</title><rect x="312.0" y="1203.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="315.0" y="1214.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.20%)</title><rect x="312.0" y="1187.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="315.0" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.20%)</title><rect x="312.0" y="1171.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="315.0" y="1182.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.40%)</title><rect x="314.4" y="1235.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="317.4" y="1246.0"></text>
</g>
<g>
<title>jmpConUNode::size(PhaseRegAlloc*) const (1 samples, 0.20%)</title><rect x="319.0" y="1235.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="322.0" y="1246.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 1.19%)</title><rect x="321.4" y="1267.0" width="14.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="324.4" y="1278.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.60%)</title><rect x="321.4" y="1251.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="324.4" y="1262.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.20%)</title><rect x="321.4" y="1235.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="324.4" y="1246.0"></text>
</g>
<g>
<title>PhaseRegAlloc::is_oop(Node const*) const (1 samples, 0.20%)</title><rect x="321.4" y="1219.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="324.4" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.20%)</title><rect x="323.7" y="1235.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="326.7" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.20%)</title><rect x="323.7" y="1219.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="326.7" y="1230.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (1 samples, 0.20%)</title><rect x="323.7" y="1203.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="326.7" y="1214.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.20%)</title><rect x="326.1" y="1235.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="329.1" y="1246.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (2 samples, 0.40%)</title><rect x="328.4" y="1251.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="331.4" y="1262.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.40%)</title><rect x="328.4" y="1235.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="331.4" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.40%)</title><rect x="328.4" y="1219.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="331.4" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.40%)</title><rect x="328.4" y="1203.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="331.4" y="1214.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (2 samples, 0.40%)</title><rect x="328.4" y="1187.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="331.4" y="1198.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_safepoint(JVMState*, int) (1 samples, 0.20%)</title><rect x="333.1" y="1251.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="336.1" y="1262.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.20%)</title><rect x="333.1" y="1235.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="336.1" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.20%)</title><rect x="333.1" y="1219.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="336.1" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.20%)</title><rect x="333.1" y="1203.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="336.1" y="1214.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (1 samples, 0.20%)</title><rect x="333.1" y="1187.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="336.1" y="1198.0"></text>
</g>
<g>
<title>Matcher::match() (15 samples, 2.98%)</title><rect x="335.4" y="1267.0" width="35.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="338.4" y="1278.0">Mat..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.40%)</title><rect x="335.4" y="1251.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="338.4" y="1262.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.20%)</title><rect x="340.1" y="1251.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.1" y="1262.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.20%)</title><rect x="340.1" y="1235.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="343.1" y="1246.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.20%)</title><rect x="340.1" y="1219.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="343.1" y="1230.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.20%)</title><rect x="340.1" y="1203.0" width="2.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="343.1" y="1214.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.20%)</title><rect x="340.1" y="1187.0" width="2.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="343.1" y="1198.0"></text>
</g>
<g>
<title>Compile::check_node_count(unsigned int, char const*) (1 samples, 0.20%)</title><rect x="342.5" y="1251.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="345.5" y="1262.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.40%)</title><rect x="344.8" y="1251.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="347.8" y="1262.0"></text>
</g>
<g>
<title>VectorSet::set(unsigned int) (1 samples, 0.20%)</title><rect x="347.1" y="1235.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="350.1" y="1246.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 1.79%)</title><rect x="349.5" y="1251.0" width="21.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="352.5" y="1262.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.79%)</title><rect x="349.5" y="1235.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="352.5" y="1246.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.79%)</title><rect x="358.8" y="1235.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="361.8" y="1246.0"></text>
</g>
<g>
<title>Arena::set_size_in_bytes(unsigned long) (1 samples, 0.20%)</title><rect x="358.8" y="1219.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="361.8" y="1230.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.20%)</title><rect x="361.2" y="1219.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="364.2" y="1230.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.20%)</title><rect x="361.2" y="1203.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="364.2" y="1214.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.20%)</title><rect x="361.2" y="1187.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="364.2" y="1198.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.40%)</title><rect x="363.5" y="1219.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="366.5" y="1230.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.20%)</title><rect x="363.5" y="1203.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="366.5" y="1214.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.20%)</title><rect x="363.5" y="1187.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="366.5" y="1198.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.20%)</title><rect x="363.5" y="1171.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="366.5" y="1182.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.20%)</title><rect x="365.9" y="1203.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="368.9" y="1214.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.20%)</title><rect x="368.2" y="1235.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="371.2" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 1.59%)</title><rect x="370.6" y="1267.0" width="18.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="373.6" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (2 samples, 0.40%)</title><rect x="370.6" y="1251.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="373.6" y="1262.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.20%)</title><rect x="370.6" y="1235.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="373.6" y="1246.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.20%)</title><rect x="370.6" y="1219.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="373.6" y="1230.0"></text>
</g>
<g>
<title>CFGLoop::update_succ_freq(Block*, float) (1 samples, 0.20%)</title><rect x="370.6" y="1203.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="373.6" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.20%)</title><rect x="372.9" y="1235.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="375.9" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 1.19%)</title><rect x="375.2" y="1251.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="378.2" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.79%)</title><rect x="375.2" y="1235.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="378.2" y="1246.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (4 samples, 0.79%)</title><rect x="375.2" y="1219.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="378.2" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.40%)</title><rect x="384.6" y="1235.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="387.6" y="1246.0"></text>
</g>
<g>
<title>Node_Array::Node_Array(Arena*) (1 samples, 0.20%)</title><rect x="384.6" y="1219.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="387.6" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.20%)</title><rect x="386.9" y="1219.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="389.9" y="1230.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (1 samples, 0.20%)</title><rect x="386.9" y="1203.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="389.9" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (231 samples, 45.83%)</title><rect x="389.3" y="1267.0" width="540.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="392.3" y="1278.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.20%)</title><rect x="389.3" y="1251.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="392.3" y="1262.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.20%)</title><rect x="391.6" y="1251.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="394.6" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.20%)</title><rect x="394.0" y="1251.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="397.0" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.20%)</title><rect x="396.3" y="1251.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="399.3" y="1262.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.20%)</title><rect x="398.7" y="1251.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="401.7" y="1262.0"></text>
</g>
<g>
<title>MachSpillCopyNode::oper_input_base() const (1 samples, 0.20%)</title><rect x="401.0" y="1251.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="404.0" y="1262.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.20%)</title><rect x="403.3" y="1251.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="406.3" y="1262.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (7 samples, 1.39%)</title><rect x="405.7" y="1251.0" width="16.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="408.7" y="1262.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.20%)</title><rect x="415.0" y="1235.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="418.0" y="1246.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.40%)</title><rect x="417.4" y="1235.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="420.4" y="1246.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.40%)</title><rect x="417.4" y="1219.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="420.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (29 samples, 5.75%)</title><rect x="422.1" y="1251.0" width="67.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="425.1" y="1262.0">PhaseCh..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.20%)</title><rect x="426.7" y="1235.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="429.7" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.40%)</title><rect x="429.1" y="1235.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="432.1" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.40%)</title><rect x="433.8" y="1235.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="436.8" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (3 samples, 0.60%)</title><rect x="438.5" y="1235.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="441.5" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.20%)</title><rect x="438.5" y="1219.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="441.5" y="1230.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (2 samples, 0.40%)</title><rect x="440.8" y="1219.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="443.8" y="1230.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.20%)</title><rect x="443.1" y="1203.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="446.1" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (13 samples, 2.58%)</title><rect x="445.5" y="1235.0" width="30.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="448.5" y="1246.0">Ph..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.99%)</title><rect x="445.5" y="1219.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="448.5" y="1230.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.40%)</title><rect x="452.5" y="1203.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="455.5" y="1214.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.20%)</title><rect x="454.8" y="1187.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="457.8" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.20%)</title><rect x="457.2" y="1219.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="460.2" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 1.19%)</title><rect x="459.5" y="1219.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="462.5" y="1230.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.20%)</title><rect x="473.6" y="1219.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="476.6" y="1230.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (6 samples, 1.19%)</title><rect x="475.9" y="1235.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="478.9" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (30 samples, 5.95%)</title><rect x="490.0" y="1251.0" width="70.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="493.0" y="1262.0">PhaseCha..</text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (1 samples, 0.20%)</title><rect x="494.6" y="1235.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="497.6" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.79%)</title><rect x="497.0" y="1235.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="500.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (23 samples, 4.56%)</title><rect x="506.3" y="1235.0" width="53.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="509.3" y="1246.0">Phase..</text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (10 samples, 1.98%)</title><rect x="506.3" y="1219.0" width="23.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="509.3" y="1230.0">I..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.40%)</title><rect x="529.8" y="1219.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="532.8" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (9 samples, 1.79%)</title><rect x="534.4" y="1219.0" width="21.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="537.4" y="1230.0">I..</text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.40%)</title><rect x="555.5" y="1219.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="558.5" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (18 samples, 3.57%)</title><rect x="560.2" y="1251.0" width="42.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="563.2" y="1262.0">Phas..</text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="581.3" y="1235.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="584.3" y="1246.0"></text>
</g>
<g>
<title>Block::end_idx() const (2 samples, 0.40%)</title><rect x="583.6" y="1235.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="586.6" y="1246.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.20%)</title><rect x="588.3" y="1235.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="591.3" y="1246.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.20%)</title><rect x="588.3" y="1219.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="591.3" y="1230.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="588.3" y="1203.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="591.3" y="1214.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.20%)</title><rect x="588.3" y="1187.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="591.3" y="1198.0"></text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.60%)</title><rect x="590.6" y="1235.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="593.6" y="1246.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.20%)</title><rect x="590.6" y="1219.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="593.6" y="1230.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.20%)</title><rect x="590.6" y="1203.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="593.6" y="1214.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.20%)</title><rect x="590.6" y="1187.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="593.6" y="1198.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.20%)</title><rect x="593.0" y="1219.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.0" y="1230.0"></text>
</g>
<g>
<title>tlsLoadPNode::rule() const (1 samples, 0.20%)</title><rect x="595.3" y="1219.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="598.3" y="1230.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.20%)</title><rect x="597.7" y="1235.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="600.7" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.20%)</title><rect x="600.0" y="1235.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="603.0" y="1246.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.20%)</title><rect x="600.0" y="1219.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="603.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (48 samples, 9.52%)</title><rect x="602.3" y="1251.0" width="112.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="605.3" y="1262.0">PhaseChaitin::..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.20%)</title><rect x="623.4" y="1235.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="626.4" y="1246.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.20%)</title><rect x="625.8" y="1235.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="628.8" y="1246.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (1 samples, 0.20%)</title><rect x="628.1" y="1235.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="631.1" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.20%)</title><rect x="630.4" y="1235.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="633.4" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (27 samples, 5.36%)</title><rect x="632.8" y="1235.0" width="63.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="635.8" y="1246.0">PhaseCh..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (10 samples, 1.98%)</title><rect x="646.8" y="1219.0" width="23.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="649.8" y="1230.0">I..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 1.19%)</title><rect x="670.2" y="1219.0" width="14.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="673.2" y="1230.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (5 samples, 0.99%)</title><rect x="684.3" y="1219.0" width="11.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="687.3" y="1230.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (1 samples, 0.20%)</title><rect x="696.0" y="1235.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="699.0" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.20%)</title><rect x="698.3" y="1235.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="701.3" y="1246.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.40%)</title><rect x="700.7" y="1235.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="703.7" y="1246.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.20%)</title><rect x="705.4" y="1235.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="708.4" y="1246.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.40%)</title><rect x="707.7" y="1235.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="710.7" y="1246.0"></text>
</g>
<g>
<title>lower_pressure(LRG*, unsigned int, Block*, unsigned int*, unsigned int*) (1 samples, 0.20%)</title><rect x="712.4" y="1235.0" width="2.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="715.4" y="1246.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.20%)</title><rect x="712.4" y="1219.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="715.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.20%)</title><rect x="714.7" y="1251.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="717.7" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.20%)</title><rect x="714.7" y="1235.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="717.7" y="1246.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.20%)</title><rect x="714.7" y="1219.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="717.7" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (17 samples, 3.37%)</title><rect x="717.1" y="1251.0" width="39.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="720.1" y="1262.0">Pha..</text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.20%)</title><rect x="731.1" y="1235.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="734.1" y="1246.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.20%)</title><rect x="731.1" y="1219.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.1" y="1230.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (3 samples, 0.60%)</title><rect x="733.5" y="1235.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="736.5" y="1246.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (3 samples, 0.60%)</title><rect x="740.5" y="1235.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="743.5" y="1246.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (2 samples, 0.40%)</title><rect x="742.8" y="1219.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="745.8" y="1230.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (4 samples, 0.79%)</title><rect x="747.5" y="1235.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="750.5" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.60%)</title><rect x="749.8" y="1219.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="752.8" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (16 samples, 3.17%)</title><rect x="756.9" y="1251.0" width="37.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="759.9" y="1262.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (10 samples, 1.98%)</title><rect x="763.9" y="1235.0" width="23.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="766.9" y="1246.0">P..</text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.20%)</title><rect x="780.3" y="1219.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="783.3" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.20%)</title><rect x="782.6" y="1219.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="785.6" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.20%)</title><rect x="782.6" y="1203.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="785.6" y="1214.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.20%)</title><rect x="782.6" y="1187.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="785.6" y="1198.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.20%)</title><rect x="782.6" y="1171.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="785.6" y="1182.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.20%)</title><rect x="785.0" y="1219.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="788.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::eliminate_copy_of_constant(Node*, Node*, Block*, Node_List&amp;, Node_List&amp;, int, int) (1 samples, 0.20%)</title><rect x="787.3" y="1235.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="790.3" y="1246.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (2 samples, 0.40%)</title><rect x="789.6" y="1235.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="792.6" y="1246.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.20%)</title><rect x="792.0" y="1219.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="795.0" y="1230.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 1.98%)</title><rect x="794.3" y="1251.0" width="23.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="797.3" y="1262.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 1.98%)</title><rect x="794.3" y="1235.0" width="23.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="797.3" y="1246.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 1.98%)</title><rect x="794.3" y="1219.0" width="23.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="797.3" y="1230.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 0.79%)</title><rect x="796.7" y="1203.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="799.7" y="1214.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.20%)</title><rect x="799.0" y="1187.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="802.0" y="1198.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.20%)</title><rect x="799.0" y="1171.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="802.0" y="1182.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.20%)</title><rect x="799.0" y="1155.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="802.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.40%)</title><rect x="801.3" y="1187.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="804.3" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.99%)</title><rect x="806.0" y="1203.0" width="11.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="809.0" y="1214.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.79%)</title><rect x="806.0" y="1187.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="809.0" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.20%)</title><rect x="815.4" y="1187.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="818.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (13 samples, 2.58%)</title><rect x="817.7" y="1251.0" width="30.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="820.7" y="1262.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (13 samples, 2.58%)</title><rect x="817.7" y="1235.0" width="30.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="820.7" y="1246.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 1.19%)</title><rect x="824.8" y="1219.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="827.8" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.79%)</title><rect x="838.8" y="1219.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="841.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (18 samples, 3.57%)</title><rect x="848.2" y="1251.0" width="42.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="851.2" y="1262.0">Phas..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (8 samples, 1.59%)</title><rect x="848.2" y="1235.0" width="18.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="851.2" y="1246.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.20%)</title><rect x="864.6" y="1219.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.6" y="1230.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.20%)</title><rect x="864.6" y="1203.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="867.6" y="1214.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.20%)</title><rect x="864.6" y="1187.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="867.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (8 samples, 1.59%)</title><rect x="866.9" y="1235.0" width="18.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="869.9" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.40%)</title><rect x="885.6" y="1235.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (5 samples, 0.99%)</title><rect x="890.3" y="1251.0" width="11.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="893.3" y="1262.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.60%)</title><rect x="892.7" y="1235.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="895.7" y="1246.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.20%)</title><rect x="899.7" y="1235.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="902.7" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 1.98%)</title><rect x="902.0" y="1251.0" width="23.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.0" y="1262.0">P..</text>
</g>
<g>
<title>IndexSet::clear() (1 samples, 0.20%)</title><rect x="913.7" y="1235.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.7" y="1246.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.20%)</title><rect x="916.1" y="1235.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="919.1" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.40%)</title><rect x="918.4" y="1235.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="921.4" y="1246.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.40%)</title><rect x="918.4" y="1219.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="921.4" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.20%)</title><rect x="923.1" y="1235.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.1" y="1246.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.40%)</title><rect x="925.4" y="1251.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.4" y="1262.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.40%)</title><rect x="925.4" y="1235.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.4" y="1246.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.40%)</title><rect x="925.4" y="1219.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.4" y="1230.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.20%)</title><rect x="925.4" y="1203.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="928.4" y="1214.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.20%)</title><rect x="927.8" y="1203.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="930.8" y="1214.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 9.13%)</title><rect x="930.1" y="1283.0" width="107.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.1" y="1294.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.20%)</title><rect x="930.1" y="1267.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="933.1" y="1278.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.20%)</title><rect x="930.1" y="1251.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.1" y="1262.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.60%)</title><rect x="932.5" y="1267.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="935.5" y="1278.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.20%)</title><rect x="937.1" y="1251.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 5.75%)</title><rect x="939.5" y="1267.0" width="67.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.5" y="1278.0">PhaseId..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1251.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.5" y="1262.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1235.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.5" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1219.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.5" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1203.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.5" y="1214.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1187.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.5" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1171.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.5" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1155.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.5" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1139.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.5" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1123.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.5" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1107.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.5" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="939.5" y="1091.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.20%)</title><rect x="939.5" y="1075.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.20%)</title><rect x="939.5" y="1059.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="942.5" y="1070.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.20%)</title><rect x="939.5" y="1043.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.5" y="1054.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.20%)</title><rect x="941.8" y="1251.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.8" y="1262.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.20%)</title><rect x="944.2" y="1251.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.2" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.20%)</title><rect x="946.5" y="1251.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.5" y="1262.0"></text>
</g>
<g>
<title>NTarjan::EVAL() (1 samples, 0.20%)</title><rect x="946.5" y="1235.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="949.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 1.19%)</title><rect x="948.8" y="1251.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="951.8" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.20%)</title><rect x="955.9" y="1235.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="958.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.20%)</title><rect x="955.9" y="1219.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.20%)</title><rect x="958.2" y="1235.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="961.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_ctrl(Node*, Node*) (1 samples, 0.20%)</title><rect x="960.6" y="1235.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="963.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 1.39%)</title><rect x="962.9" y="1251.0" width="16.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.9" y="1262.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.20%)</title><rect x="967.6" y="1235.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="970.6" y="1246.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.20%)</title><rect x="967.6" y="1219.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="970.6" y="1230.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.20%)</title><rect x="967.6" y="1203.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="970.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.79%)</title><rect x="969.9" y="1235.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="972.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.20%)</title><rect x="974.6" y="1219.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.20%)</title><rect x="974.6" y="1203.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.20%)</title><rect x="976.9" y="1219.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.20%)</title><rect x="976.9" y="1203.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.20%)</title><rect x="976.9" y="1187.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="979.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.20%)</title><rect x="976.9" y="1171.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (6 samples, 1.19%)</title><rect x="979.3" y="1251.0" width="14.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.3" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.20%)</title><rect x="991.0" y="1235.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.60%)</title><rect x="993.3" y="1251.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.3" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.20%)</title><rect x="995.7" y="1235.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="998.7" y="1246.0"></text>
</g>
<g>
<title>Dict::Dict(int (*)(void const*, void const*), int (*)(void const*)) (1 samples, 0.20%)</title><rect x="995.7" y="1219.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="998.7" y="1230.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="995.7" y="1203.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.7" y="1214.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.20%)</title><rect x="995.7" y="1187.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.7" y="1198.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="995.7" y="1171.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.7" y="1182.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.20%)</title><rect x="995.7" y="1155.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="998.7" y="1166.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.20%)</title><rect x="995.7" y="1139.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="998.7" y="1150.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.20%)</title><rect x="995.7" y="1123.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="998.7" y="1134.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.20%)</title><rect x="995.7" y="1107.0" width="2.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="998.7" y="1118.0"></text>
</g>
<g>
<title>small_malloc_should_clear (1 samples, 0.20%)</title><rect x="995.7" y="1091.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="998.7" y="1102.0"></text>
</g>
<g>
<title>small_malloc_from_free_list (1 samples, 0.20%)</title><rect x="995.7" y="1075.0" width="2.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="998.7" y="1086.0"></text>
</g>
<g>
<title>small_free_list_add_ptr (1 samples, 0.20%)</title><rect x="995.7" y="1059.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="998.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.20%)</title><rect x="998.0" y="1235.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.0" y="1246.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.20%)</title><rect x="998.0" y="1219.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.60%)</title><rect x="1000.4" y="1251.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1003.4" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.60%)</title><rect x="1000.4" y="1235.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1003.4" y="1246.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1000.4" y="1219.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1003.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.20%)</title><rect x="1002.7" y="1219.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1005.7" y="1230.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.20%)</title><rect x="1002.7" y="1203.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.7" y="1214.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1005.0" y="1219.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1008.0" y="1230.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.20%)</title><rect x="1005.0" y="1203.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.0" y="1214.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.20%)</title><rect x="1005.0" y="1187.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.0" y="1198.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.20%)</title><rect x="1005.0" y="1171.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.0" y="1182.0"></text>
</g>
<g>
<title>VectorSet::grow(unsigned int) (1 samples, 0.20%)</title><rect x="1005.0" y="1155.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1008.0" y="1166.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="1005.0" y="1139.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.0" y="1150.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="1005.0" y="1123.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1008.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.20%)</title><rect x="1007.4" y="1267.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.4" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.20%)</title><rect x="1007.4" y="1251.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1010.4" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.20%)</title><rect x="1007.4" y="1235.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 2.18%)</title><rect x="1009.7" y="1267.0" width="25.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1012.7" y="1278.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 2.18%)</title><rect x="1009.7" y="1251.0" width="25.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.7" y="1262.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1009.7" y="1235.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.7" y="1246.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1009.7" y="1219.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.7" y="1230.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.20%)</title><rect x="1009.7" y="1203.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.7" y="1214.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.20%)</title><rect x="1009.7" y="1187.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1012.7" y="1198.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1012.1" y="1235.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.1" y="1246.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.20%)</title><rect x="1012.1" y="1219.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1015.1" y="1230.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.20%)</title><rect x="1012.1" y="1203.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1015.1" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.20%)</title><rect x="1012.1" y="1187.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1015.1" y="1198.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.20%)</title><rect x="1014.4" y="1235.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.4" y="1246.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.20%)</title><rect x="1014.4" y="1219.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1017.4" y="1230.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.20%)</title><rect x="1014.4" y="1203.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.4" y="1214.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.20%)</title><rect x="1016.7" y="1235.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1019.7" y="1246.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.20%)</title><rect x="1016.7" y="1219.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1019.7" y="1230.0"></text>
</g>
<g>
<title>CastIINode::Opcode() const (1 samples, 0.20%)</title><rect x="1016.7" y="1203.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1019.7" y="1214.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.20%)</title><rect x="1019.1" y="1235.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.1" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.40%)</title><rect x="1021.4" y="1235.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.20%)</title><rect x="1023.8" y="1219.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1026.8" y="1230.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.60%)</title><rect x="1026.1" y="1235.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.1" y="1246.0"></text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.20%)</title><rect x="1026.1" y="1219.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.1" y="1230.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.40%)</title><rect x="1028.5" y="1219.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.5" y="1230.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.20%)</title><rect x="1030.8" y="1203.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.8" y="1214.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1033.1" y="1235.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.1" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.20%)</title><rect x="1033.1" y="1219.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.1" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1203.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.1" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1187.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.1" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1171.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.1" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1155.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.1" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1139.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.1" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1123.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.1" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1107.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.1" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1091.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1036.1" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1075.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.1" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1059.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.1" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1043.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.1" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1027.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.1" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="1011.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.1" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="995.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.1" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="979.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.1" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="963.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.1" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="947.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.1" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="931.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.1" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="915.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.1" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="899.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.1" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="883.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.1" y="894.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.20%)</title><rect x="1033.1" y="867.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.1" y="878.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="1033.1" y="851.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.1" y="862.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.20%)</title><rect x="1033.1" y="835.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.1" y="846.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.20%)</title><rect x="1035.5" y="1267.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1038.5" y="1278.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.20%)</title><rect x="1035.5" y="1251.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.5" y="1262.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.20%)</title><rect x="1035.5" y="1235.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.5" y="1246.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.20%)</title><rect x="1035.5" y="1219.0" width="2.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1038.5" y="1230.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.20%)</title><rect x="1035.5" y="1203.0" width="2.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1038.5" y="1214.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.20%)</title><rect x="1035.5" y="1187.0" width="2.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1038.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 3.57%)</title><rect x="1037.8" y="1283.0" width="42.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1040.8" y="1294.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 3.57%)</title><rect x="1037.8" y="1267.0" width="42.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1040.8" y="1278.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 3.57%)</title><rect x="1037.8" y="1251.0" width="42.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1040.8" y="1262.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 3.57%)</title><rect x="1037.8" y="1235.0" width="42.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1040.8" y="1246.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (18 samples, 3.57%)</title><rect x="1037.8" y="1219.0" width="42.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1040.8" y="1230.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (18 samples, 3.57%)</title><rect x="1037.8" y="1203.0" width="42.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.8" y="1214.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.40%)</title><rect x="1037.8" y="1187.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.8" y="1198.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.40%)</title><rect x="1037.8" y="1171.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1040.8" y="1182.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.20%)</title><rect x="1037.8" y="1155.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1040.8" y="1166.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.20%)</title><rect x="1037.8" y="1139.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1040.8" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.20%)</title><rect x="1037.8" y="1123.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1040.8" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.20%)</title><rect x="1037.8" y="1107.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1040.8" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1037.8" y="1091.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1040.8" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1037.8" y="1075.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.8" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1037.8" y="1059.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.8" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.20%)</title><rect x="1037.8" y="1043.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1040.8" y="1054.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1037.8" y="1027.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1040.8" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1037.8" y="1011.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1040.8" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1037.8" y="995.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.8" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1037.8" y="979.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.8" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::insert(int, ciMetadata*, GrowableArray&lt;ciMetadata*&gt;*) (1 samples, 0.20%)</title><rect x="1037.8" y="963.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1040.8" y="974.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1040.2" y="1155.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.2" y="1166.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.20%)</title><rect x="1040.2" y="1139.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1043.2" y="1150.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.20%)</title><rect x="1040.2" y="1123.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1043.2" y="1134.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.20%)</title><rect x="1040.2" y="1107.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.2" y="1118.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.20%)</title><rect x="1040.2" y="1091.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1043.2" y="1102.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.20%)</title><rect x="1040.2" y="1075.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1043.2" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 2.78%)</title><rect x="1042.5" y="1187.0" width="32.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1045.5" y="1198.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 2.78%)</title><rect x="1042.5" y="1171.0" width="32.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1045.5" y="1182.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 2.78%)</title><rect x="1042.5" y="1155.0" width="32.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.5" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 2.78%)</title><rect x="1042.5" y="1139.0" width="32.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.5" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 2.78%)</title><rect x="1042.5" y="1123.0" width="32.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1045.5" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (13 samples, 2.58%)</title><rect x="1042.5" y="1107.0" width="30.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.5" y="1118.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.20%)</title><rect x="1042.5" y="1091.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.5" y="1102.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1042.5" y="1075.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 2.18%)</title><rect x="1044.8" y="1091.0" width="25.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.8" y="1102.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 2.18%)</title><rect x="1044.8" y="1075.0" width="25.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.8" y="1086.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 2.18%)</title><rect x="1044.8" y="1059.0" width="25.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.8" y="1070.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 2.18%)</title><rect x="1044.8" y="1043.0" width="25.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.8" y="1054.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 2.18%)</title><rect x="1044.8" y="1027.0" width="25.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.8" y="1038.0">P..</text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.20%)</title><rect x="1044.8" y="1011.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 1.98%)</title><rect x="1047.2" y="1011.0" width="23.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.2" y="1022.0">P..</text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.20%)</title><rect x="1047.2" y="995.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.2" y="1006.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.20%)</title><rect x="1047.2" y="979.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.2" y="990.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.20%)</title><rect x="1047.2" y="963.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1050.2" y="974.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.20%)</title><rect x="1047.2" y="947.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.2" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.20%)</title><rect x="1047.2" y="931.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1050.2" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.20%)</title><rect x="1047.2" y="915.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.2" y="926.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::remove_at(int) (1 samples, 0.20%)</title><rect x="1047.2" y="899.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1050.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.39%)</title><rect x="1049.5" y="995.0" width="16.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.5" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.39%)</title><rect x="1049.5" y="979.0" width="16.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.39%)</title><rect x="1049.5" y="963.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1052.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.39%)</title><rect x="1049.5" y="947.0" width="16.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.39%)</title><rect x="1049.5" y="931.0" width="16.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.39%)</title><rect x="1049.5" y="915.0" width="16.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.39%)</title><rect x="1049.5" y="899.0" width="16.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1052.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.39%)</title><rect x="1049.5" y="883.0" width="16.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.39%)</title><rect x="1049.5" y="867.0" width="16.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.39%)</title><rect x="1049.5" y="851.0" width="16.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1052.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.39%)</title><rect x="1049.5" y="835.0" width="16.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.39%)</title><rect x="1049.5" y="819.0" width="16.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.39%)</title><rect x="1049.5" y="803.0" width="16.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.39%)</title><rect x="1049.5" y="787.0" width="16.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.19%)</title><rect x="1049.5" y="771.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.19%)</title><rect x="1049.5" y="755.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1052.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.19%)</title><rect x="1049.5" y="739.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.19%)</title><rect x="1049.5" y="723.0" width="14.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1052.5" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.20%)</title><rect x="1049.5" y="707.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.5" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1049.5" y="691.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1052.5" y="702.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.20%)</title><rect x="1049.5" y="675.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.5" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.20%)</title><rect x="1049.5" y="659.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.5" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.20%)</title><rect x="1049.5" y="643.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.20%)</title><rect x="1049.5" y="627.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1049.5" y="611.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1049.5" y="595.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.5" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1049.5" y="579.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1052.5" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_ldc(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1049.5" y="563.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.5" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.20%)</title><rect x="1049.5" y="547.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1052.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.79%)</title><rect x="1051.9" y="707.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1054.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.79%)</title><rect x="1051.9" y="691.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.79%)</title><rect x="1051.9" y="675.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.60%)</title><rect x="1051.9" y="659.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.60%)</title><rect x="1051.9" y="643.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.60%)</title><rect x="1051.9" y="627.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.9" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.20%)</title><rect x="1051.9" y="611.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.9" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1051.9" y="595.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.9" y="606.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.20%)</title><rect x="1051.9" y="579.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.9" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.20%)</title><rect x="1051.9" y="563.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1054.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.20%)</title><rect x="1051.9" y="547.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1054.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.20%)</title><rect x="1051.9" y="531.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.9" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1051.9" y="515.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.9" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1051.9" y="499.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1051.9" y="483.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.20%)</title><rect x="1051.9" y="467.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.9" y="478.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="1051.9" y="451.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1054.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1054.2" y="611.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.40%)</title><rect x="1054.2" y="595.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.40%)</title><rect x="1054.2" y="579.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.40%)</title><rect x="1054.2" y="563.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.40%)</title><rect x="1054.2" y="547.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1057.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.40%)</title><rect x="1054.2" y="531.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1054.2" y="515.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.40%)</title><rect x="1054.2" y="499.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.40%)</title><rect x="1054.2" y="483.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.40%)</title><rect x="1054.2" y="467.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1057.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.40%)</title><rect x="1054.2" y="451.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.40%)</title><rect x="1054.2" y="435.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1054.2" y="419.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.2" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.40%)</title><rect x="1054.2" y="403.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1057.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.40%)</title><rect x="1054.2" y="387.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.40%)</title><rect x="1054.2" y="371.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.40%)</title><rect x="1054.2" y="355.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_anewarray() (1 samples, 0.20%)</title><rect x="1054.2" y="339.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1057.2" y="350.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.20%)</title><rect x="1054.2" y="323.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.2" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.20%)</title><rect x="1054.2" y="307.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1056.5" y="339.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1059.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1056.5" y="323.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1056.5" y="307.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.5" y="318.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.20%)</title><rect x="1056.5" y="291.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.5" y="302.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.20%)</title><rect x="1056.5" y="275.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.5" y="286.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.20%)</title><rect x="1056.5" y="259.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.5" y="270.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.20%)</title><rect x="1056.5" y="243.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.5" y="254.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.20%)</title><rect x="1056.5" y="227.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.5" y="238.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.20%)</title><rect x="1056.5" y="211.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.5" y="222.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.20%)</title><rect x="1056.5" y="195.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.5" y="206.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.20%)</title><rect x="1056.5" y="179.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.5" y="190.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.20%)</title><rect x="1058.9" y="659.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.20%)</title><rect x="1058.9" y="643.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1061.2" y="707.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.2" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1061.2" y="691.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.2" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1061.2" y="675.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.2" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1061.2" y="659.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.2" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::find(Metadata*, GrowableArray&lt;ciMetadata*&gt;*) (1 samples, 0.20%)</title><rect x="1061.2" y="643.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1064.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.20%)</title><rect x="1063.6" y="771.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.6" y="782.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.20%)</title><rect x="1063.6" y="755.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.6" y="766.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.20%)</title><rect x="1063.6" y="739.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.6" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.20%)</title><rect x="1063.6" y="723.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.6" y="734.0"></text>
</g>
<g>
<title>MergeMemStream::MergeMemStream(MergeMemNode*, MergeMemNode const*) (1 samples, 0.20%)</title><rect x="1063.6" y="707.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.6" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.20%)</title><rect x="1063.6" y="691.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.6" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::grow_to_match(MergeMemNode const*) (1 samples, 0.20%)</title><rect x="1063.6" y="675.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.6" y="686.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.20%)</title><rect x="1063.6" y="659.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.6" y="670.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.20%)</title><rect x="1063.6" y="643.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.6" y="654.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="1063.6" y="627.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.6" y="638.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="1063.6" y="611.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.6" y="622.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.20%)</title><rect x="1063.6" y="595.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.6" y="606.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="1063.6" y="579.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1066.6" y="590.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.20%)</title><rect x="1063.6" y="563.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.6" y="574.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.20%)</title><rect x="1063.6" y="547.0" width="2.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1066.6" y="558.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.20%)</title><rect x="1063.6" y="531.0" width="2.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1066.6" y="542.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.20%)</title><rect x="1063.6" y="515.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1066.6" y="526.0"></text>
</g>
<g>
<title>small_malloc_should_clear (1 samples, 0.20%)</title><rect x="1063.6" y="499.0" width="2.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1066.6" y="510.0"></text>
</g>
<g>
<title>small_malloc_from_free_list (1 samples, 0.20%)</title><rect x="1063.6" y="483.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1066.6" y="494.0"></text>
</g>
<g>
<title>small_free_list_add_ptr (1 samples, 0.20%)</title><rect x="1063.6" y="467.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1066.6" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1065.9" y="995.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.9" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1065.9" y="979.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.9" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1065.9" y="963.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1065.9" y="947.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1065.9" y="931.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1065.9" y="915.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1065.9" y="899.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1068.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1065.9" y="883.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1065.9" y="867.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1065.9" y="851.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1065.9" y="835.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1065.9" y="819.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1065.9" y="803.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.9" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1065.9" y="787.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1068.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1065.9" y="771.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1065.9" y="755.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1065.9" y="739.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1065.9" y="723.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1065.9" y="707.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1068.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1065.9" y="691.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1068.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1065.9" y="675.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1065.9" y="659.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1065.9" y="643.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1065.9" y="627.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1065.9" y="611.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1065.9" y="595.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1068.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1065.9" y="579.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1065.9" y="563.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1065.9" y="547.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1065.9" y="531.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1068.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1065.9" y="515.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1065.9" y="499.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1065.9" y="483.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1065.9" y="467.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1065.9" y="451.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1065.9" y="435.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1065.9" y="419.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1065.9" y="403.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1065.9" y="387.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.9" y="398.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.20%)</title><rect x="1065.9" y="371.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.9" y="382.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.20%)</title><rect x="1065.9" y="355.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.9" y="366.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.20%)</title><rect x="1065.9" y="339.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1068.9" y="350.0"></text>
</g>
<g>
<title>GraphKit::builtin_throw(Deoptimization::DeoptReason, Node*) (1 samples, 0.20%)</title><rect x="1065.9" y="323.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.9" y="334.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap_if_should_post_on_exceptions(Deoptimization::DeoptReason, bool) (1 samples, 0.20%)</title><rect x="1065.9" y="307.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.9" y="318.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.20%)</title><rect x="1065.9" y="291.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.9" y="302.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.20%)</title><rect x="1065.9" y="275.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.9" y="286.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.20%)</title><rect x="1065.9" y="259.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.9" y="270.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.20%)</title><rect x="1065.9" y="243.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.9" y="254.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.20%)</title><rect x="1065.9" y="227.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.9" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1068.3" y="979.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1071.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1068.3" y="963.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1068.3" y="947.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1068.3" y="931.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1068.3" y="915.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1068.3" y="899.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1068.3" y="883.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1068.3" y="867.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1068.3" y="851.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1068.3" y="835.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1071.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1068.3" y="819.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1071.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1068.3" y="803.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.20%)</title><rect x="1068.3" y="787.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1071.3" y="798.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.20%)</title><rect x="1068.3" y="771.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.20%)</title><rect x="1068.3" y="755.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.3" y="766.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.20%)</title><rect x="1068.3" y="739.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.3" y="750.0"></text>
</g>
<g>
<title>JVMState::JVMState(ciMethod*, JVMState*) (1 samples, 0.20%)</title><rect x="1068.3" y="723.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.3" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="1091.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.6" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="1075.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.6" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="1059.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.6" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1070.6" y="1043.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1070.6" y="1027.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1070.6" y="1011.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1070.6" y="995.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1070.6" y="979.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="963.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1073.6" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1070.6" y="947.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1070.6" y="931.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1070.6" y="915.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1070.6" y="899.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1070.6" y="883.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.6" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="867.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.6" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="851.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1073.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="835.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1070.6" y="819.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1070.6" y="803.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1070.6" y="787.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1070.6" y="771.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1070.6" y="755.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.6" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="739.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1070.6" y="723.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1070.6" y="707.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1070.6" y="691.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1070.6" y="675.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1070.6" y="659.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="643.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1070.6" y="627.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1070.6" y="611.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1070.6" y="595.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1070.6" y="579.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1070.6" y="563.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="547.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1070.6" y="531.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1070.6" y="515.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1070.6" y="499.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1070.6" y="483.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1070.6" y="467.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="451.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1070.6" y="435.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1070.6" y="419.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1070.6" y="403.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1070.6" y="387.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1070.6" y="371.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1070.6" y="355.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1070.6" y="339.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.6" y="350.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.20%)</title><rect x="1070.6" y="323.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.6" y="334.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.20%)</title><rect x="1070.6" y="307.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.6" y="318.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.20%)</title><rect x="1070.6" y="291.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.6" y="302.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.20%)</title><rect x="1070.6" y="275.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.6" y="286.0"></text>
</g>
<g>
<title>MergeMemStream::MergeMemStream(MergeMemNode*, MergeMemNode const*) (1 samples, 0.20%)</title><rect x="1070.6" y="259.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.6" y="270.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.20%)</title><rect x="1070.6" y="243.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.6" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.20%)</title><rect x="1072.9" y="1107.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.9" y="1118.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1072.9" y="1091.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.9" y="1102.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.20%)</title><rect x="1072.9" y="1075.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1075.9" y="1086.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.20%)</title><rect x="1072.9" y="1059.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.9" y="1070.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.20%)</title><rect x="1072.9" y="1043.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1075.9" y="1054.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.20%)</title><rect x="1072.9" y="1027.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1075.9" y="1038.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1075.3" y="1187.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.3" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1075.3" y="1171.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.3" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.40%)</title><rect x="1075.3" y="1155.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.40%)</title><rect x="1075.3" y="1139.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.3" y="1150.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.20%)</title><rect x="1075.3" y="1123.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.3" y="1134.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.20%)</title><rect x="1075.3" y="1107.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1078.3" y="1118.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.20%)</title><rect x="1075.3" y="1091.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.3" y="1102.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.20%)</title><rect x="1075.3" y="1075.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.3" y="1086.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.20%)</title><rect x="1075.3" y="1059.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1077.6" y="1123.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1077.6" y="1107.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1077.6" y="1091.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.6" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1077.6" y="1075.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.6" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1077.6" y="1059.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1080.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1077.6" y="1043.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.6" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1077.6" y="1027.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1077.6" y="1011.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1077.6" y="995.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1077.6" y="979.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1077.6" y="963.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.6" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1077.6" y="947.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.6" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1077.6" y="931.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1077.6" y="915.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1077.6" y="899.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1077.6" y="883.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1077.6" y="867.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.6" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1077.6" y="851.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.6" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1077.6" y="835.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1077.6" y="819.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1077.6" y="803.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1077.6" y="787.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1077.6" y="771.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1077.6" y="755.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1077.6" y="739.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1077.6" y="723.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1077.6" y="707.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1077.6" y="691.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1077.6" y="675.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1077.6" y="659.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1077.6" y="643.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1077.6" y="627.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1077.6" y="611.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1077.6" y="595.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.6" y="606.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.20%)</title><rect x="1077.6" y="579.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.6" y="590.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.20%)</title><rect x="1077.6" y="563.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.6" y="574.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.20%)</title><rect x="1077.6" y="547.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.6" y="558.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (4 samples, 0.79%)</title><rect x="1080.0" y="1283.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1083.0" y="1294.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (4 samples, 0.79%)</title><rect x="1080.0" y="1267.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.0" y="1278.0"></text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.20%)</title><rect x="1084.6" y="1251.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.6" y="1262.0"></text>
</g>
<g>
<title>Unique_Node_List::member(Node*) (1 samples, 0.20%)</title><rect x="1087.0" y="1251.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.0" y="1262.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.40%)</title><rect x="1089.3" y="1283.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.3" y="1294.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.40%)</title><rect x="1089.3" y="1267.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1092.3" y="1278.0"></text>
</g>
<g>
<title>Dependencies::DepStream::next() (1 samples, 0.20%)</title><rect x="1089.3" y="1251.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.3" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.20%)</title><rect x="1091.7" y="1251.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.7" y="1262.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (1 samples, 0.20%)</title><rect x="1094.0" y="1315.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.0" y="1326.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.20%)</title><rect x="1094.0" y="1299.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.0" y="1310.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.20%)</title><rect x="1094.0" y="1283.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.0" y="1294.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.20%)</title><rect x="1094.0" y="1267.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.0" y="1278.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.20%)</title><rect x="1094.0" y="1251.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.0" y="1262.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.20%)</title><rect x="1094.0" y="1235.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1097.0" y="1246.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.20%)</title><rect x="1094.0" y="1219.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1097.0" y="1230.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.20%)</title><rect x="1094.0" y="1203.0" width="2.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1097.0" y="1214.0"></text>
</g>
<g>
<title>__sfvwrite (1 samples, 0.20%)</title><rect x="1094.0" y="1187.0" width="2.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1097.0" y="1198.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (16 samples, 3.17%)</title><rect x="1096.3" y="1315.0" width="37.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.3" y="1326.0">Com..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (16 samples, 3.17%)</title><rect x="1096.3" y="1299.0" width="37.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.3" y="1310.0">Com..</text>
</g>
<g>
<title>Compilation::compile_method() (16 samples, 3.17%)</title><rect x="1096.3" y="1283.0" width="37.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.3" y="1294.0">Com..</text>
</g>
<g>
<title>Compilation::compile_java_method() (14 samples, 2.78%)</title><rect x="1096.3" y="1267.0" width="32.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.3" y="1278.0">Co..</text>
</g>
<g>
<title>Compilation::build_hir() (9 samples, 1.79%)</title><rect x="1096.3" y="1251.0" width="21.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1099.3" y="1262.0">C..</text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (9 samples, 1.79%)</title><rect x="1096.3" y="1235.0" width="21.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.3" y="1246.0">I..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (9 samples, 1.79%)</title><rect x="1096.3" y="1219.0" width="21.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.3" y="1230.0">I..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (9 samples, 1.79%)</title><rect x="1096.3" y="1203.0" width="21.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.3" y="1214.0">G..</text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.20%)</title><rect x="1096.3" y="1187.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.3" y="1198.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.20%)</title><rect x="1096.3" y="1171.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.3" y="1182.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.20%)</title><rect x="1096.3" y="1155.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.3" y="1166.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.20%)</title><rect x="1096.3" y="1139.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.3" y="1150.0"></text>
</g>
<g>
<title>MethodLiveness::init_gen_kill() (1 samples, 0.20%)</title><rect x="1096.3" y="1123.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.3" y="1134.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill(ciMethod*) (1 samples, 0.20%)</title><rect x="1096.3" y="1107.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.3" y="1118.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1096.3" y="1091.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.3" y="1102.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1096.3" y="1075.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.3" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (8 samples, 1.59%)</title><rect x="1098.7" y="1187.0" width="18.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.7" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (8 samples, 1.59%)</title><rect x="1098.7" y="1171.0" width="18.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.7" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.40%)</title><rect x="1098.7" y="1155.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.7" y="1166.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.40%)</title><rect x="1098.7" y="1139.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.7" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (2 samples, 0.40%)</title><rect x="1098.7" y="1123.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.7" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (2 samples, 0.40%)</title><rect x="1098.7" y="1107.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.7" y="1118.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (2 samples, 0.40%)</title><rect x="1098.7" y="1091.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.7" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1098.7" y="1075.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.7" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1098.7" y="1059.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.7" y="1070.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.20%)</title><rect x="1098.7" y="1043.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.7" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.20%)</title><rect x="1098.7" y="1027.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.7" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.20%)</title><rect x="1101.0" y="1075.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.0" y="1086.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.20%)</title><rect x="1101.0" y="1059.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.0" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 0.99%)</title><rect x="1103.4" y="1155.0" width="11.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.4" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.79%)</title><rect x="1103.4" y="1139.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.4" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.79%)</title><rect x="1103.4" y="1123.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.4" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.60%)</title><rect x="1103.4" y="1107.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.4" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.60%)</title><rect x="1103.4" y="1091.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.4" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.60%)</title><rect x="1103.4" y="1075.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.4" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.40%)</title><rect x="1103.4" y="1059.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.4" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.40%)</title><rect x="1103.4" y="1043.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.4" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::null_check(Instruction*) (1 samples, 0.20%)</title><rect x="1103.4" y="1027.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.4" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::copy_state_for_exception_with_bci(int) (1 samples, 0.20%)</title><rect x="1103.4" y="1011.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.4" y="1022.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.20%)</title><rect x="1103.4" y="995.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.4" y="1006.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.20%)</title><rect x="1103.4" y="979.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.4" y="990.0"></text>
</g>
<g>
<title>IRScopeList::push(IRScope*) (1 samples, 0.20%)</title><rect x="1105.7" y="1027.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.7" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1108.1" y="1059.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.1" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1108.1" y="1043.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.1" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1108.1" y="1027.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.1" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1108.1" y="1011.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.1" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1108.1" y="995.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.1" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1108.1" y="979.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.1" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1108.1" y="963.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.1" y="974.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.20%)</title><rect x="1108.1" y="947.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.1" y="958.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.20%)</title><rect x="1108.1" y="931.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.1" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.20%)</title><rect x="1108.1" y="915.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.1" y="926.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.20%)</title><rect x="1108.1" y="899.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.1" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.20%)</title><rect x="1110.4" y="1107.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.4" y="1118.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.20%)</title><rect x="1110.4" y="1091.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.4" y="1102.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.20%)</title><rect x="1110.4" y="1075.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.4" y="1086.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.20%)</title><rect x="1110.4" y="1059.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.4" y="1070.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.20%)</title><rect x="1110.4" y="1043.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.4" y="1054.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.20%)</title><rect x="1110.4" y="1027.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.4" y="1038.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.20%)</title><rect x="1110.4" y="1011.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.4" y="1022.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.20%)</title><rect x="1110.4" y="995.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.4" y="1006.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.20%)</title><rect x="1110.4" y="979.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.4" y="990.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.20%)</title><rect x="1112.7" y="1139.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.7" y="1150.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.20%)</title><rect x="1112.7" y="1123.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.7" y="1134.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.20%)</title><rect x="1112.7" y="1107.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.7" y="1118.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::is_witness(Klass*) (1 samples, 0.20%)</title><rect x="1112.7" y="1091.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.7" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Array&lt;Method*&gt;*, Symbol*, Symbol*) (1 samples, 0.20%)</title><rect x="1112.7" y="1075.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.7" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.20%)</title><rect x="1112.7" y="1059.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.7" y="1070.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.20%)</title><rect x="1112.7" y="1043.0" width="2.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1115.7" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::new_instance(int) (1 samples, 0.20%)</title><rect x="1115.1" y="1155.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.1" y="1166.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.20%)</title><rect x="1115.1" y="1139.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.1" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1115.1" y="1123.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.1" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1115.1" y="1107.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.1" y="1118.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.20%)</title><rect x="1115.1" y="1091.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.1" y="1102.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.20%)</title><rect x="1115.1" y="1075.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.1" y="1086.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.20%)</title><rect x="1117.4" y="1251.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.4" y="1262.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.20%)</title><rect x="1117.4" y="1235.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.4" y="1246.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (1 samples, 0.20%)</title><rect x="1117.4" y="1219.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.4" y="1230.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.20%)</title><rect x="1117.4" y="1203.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.4" y="1214.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.20%)</title><rect x="1117.4" y="1187.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.4" y="1198.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.20%)</title><rect x="1117.4" y="1171.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.4" y="1182.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.20%)</title><rect x="1117.4" y="1155.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.4" y="1166.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.20%)</title><rect x="1117.4" y="1139.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.4" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.20%)</title><rect x="1117.4" y="1123.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.4" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.20%)</title><rect x="1117.4" y="1107.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.4" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.20%)</title><rect x="1117.4" y="1091.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.4" y="1102.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (1 samples, 0.20%)</title><rect x="1117.4" y="1075.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.4" y="1086.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.20%)</title><rect x="1117.4" y="1059.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1120.4" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 0.79%)</title><rect x="1119.8" y="1251.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.8" y="1262.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (4 samples, 0.79%)</title><rect x="1119.8" y="1235.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.8" y="1246.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.40%)</title><rect x="1119.8" y="1219.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.8" y="1230.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 0.40%)</title><rect x="1119.8" y="1203.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.8" y="1214.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (2 samples, 0.40%)</title><rect x="1119.8" y="1187.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.8" y="1198.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.20%)</title><rect x="1119.8" y="1171.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="1182.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (1 samples, 0.20%)</title><rect x="1122.1" y="1171.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.1" y="1182.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (1 samples, 0.20%)</title><rect x="1122.1" y="1155.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.1" y="1166.0"></text>
</g>
<g>
<title>IntervalWalker::append_to_unhandled(Interval**, Interval*) (1 samples, 0.20%)</title><rect x="1122.1" y="1139.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.1" y="1150.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.20%)</title><rect x="1124.4" y="1219.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.4" y="1230.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.20%)</title><rect x="1124.4" y="1203.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.4" y="1214.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info(CodeEmitInfo*, int) (1 samples, 0.20%)</title><rect x="1124.4" y="1187.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.4" y="1198.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.20%)</title><rect x="1124.4" y="1171.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.4" y="1182.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value(int, Instruction*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.20%)</title><rect x="1124.4" y="1155.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.4" y="1166.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.20%)</title><rect x="1126.8" y="1219.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.8" y="1230.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.20%)</title><rect x="1126.8" y="1203.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.8" y="1214.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.20%)</title><rect x="1126.8" y="1187.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.8" y="1198.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (2 samples, 0.40%)</title><rect x="1129.1" y="1267.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.1" y="1278.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.40%)</title><rect x="1129.1" y="1251.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.1" y="1262.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.40%)</title><rect x="1129.1" y="1235.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.1" y="1246.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.20%)</title><rect x="1129.1" y="1219.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.1" y="1230.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.20%)</title><rect x="1129.1" y="1203.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.1" y="1214.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.20%)</title><rect x="1129.1" y="1187.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.1" y="1198.0"></text>
</g>
<g>
<title>Metadata::is_methodData() const volatile (1 samples, 0.20%)</title><rect x="1131.5" y="1219.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.5" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.20%)</title><rect x="1133.8" y="1315.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="1326.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1133.8" y="1299.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.8" y="1310.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1133.8" y="1283.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.8" y="1294.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1133.8" y="1267.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="1278.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.20%)</title><rect x="1133.8" y="1251.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.8" y="1262.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.20%)</title><rect x="1133.8" y="1235.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="1246.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.20%)</title><rect x="1133.8" y="1219.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.8" y="1230.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.20%)</title><rect x="1133.8" y="1203.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="1214.0"></text>
</g>
<g>
<title>CompileQueue::get() (6 samples, 1.19%)</title><rect x="1136.2" y="1331.0" width="14.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.2" y="1342.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (6 samples, 1.19%)</title><rect x="1136.2" y="1315.0" width="14.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.2" y="1326.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (6 samples, 1.19%)</title><rect x="1136.2" y="1299.0" width="14.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.2" y="1310.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (2 samples, 0.40%)</title><rect x="1136.2" y="1283.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.2" y="1294.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (2 samples, 0.40%)</title><rect x="1136.2" y="1267.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.2" y="1278.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (4 samples, 0.79%)</title><rect x="1140.8" y="1283.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.8" y="1294.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (3 samples, 0.60%)</title><rect x="1140.8" y="1267.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.8" y="1278.0"></text>
</g>
<g>
<title>CompiledIC::ic_destination() const (2 samples, 0.40%)</title><rect x="1143.2" y="1251.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.2" y="1262.0"></text>
</g>
<g>
<title>NativeCall::destination() const (2 samples, 0.40%)</title><rect x="1143.2" y="1235.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.2" y="1246.0"></text>
</g>
<g>
<title>nmethod::make_not_entrant_or_zombie(unsigned int) (1 samples, 0.20%)</title><rect x="1147.9" y="1267.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.9" y="1278.0"></text>
</g>
<g>
<title>nmethod::flush_dependencies(BoolObjectClosure*) (1 samples, 0.20%)</title><rect x="1147.9" y="1251.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.9" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::remove_dependent_nmethod(nmethod*, bool) (1 samples, 0.20%)</title><rect x="1147.9" y="1235.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.9" y="1246.0"></text>
</g>
<g>
<title>JvmtiAgentThread::call_start_function() (2 samples, 0.40%)</title><rect x="1150.2" y="1347.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.2" y="1358.0"></text>
</g>
<g>
<title>commandLoop (2 samples, 0.40%)</title><rect x="1150.2" y="1331.0" width="4.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1153.2" y="1342.0"></text>
</g>
<g>
<title>debugMonitorWait (1 samples, 0.20%)</title><rect x="1150.2" y="1315.0" width="2.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1153.2" y="1326.0"></text>
</g>
<g>
<title>JvmtiEnv::RawMonitorWait(JvmtiRawMonitor*, long) (1 samples, 0.20%)</title><rect x="1150.2" y="1299.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.2" y="1310.0"></text>
</g>
<g>
<title>JvmtiRawMonitor::raw_wait(long, bool, Thread*) (1 samples, 0.20%)</title><rect x="1150.2" y="1283.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.2" y="1294.0"></text>
</g>
<g>
<title>JvmtiRawMonitor::SimpleWait(Thread*, long) (1 samples, 0.20%)</title><rect x="1150.2" y="1267.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.2" y="1278.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.20%)</title><rect x="1150.2" y="1251.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.2" y="1262.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.20%)</title><rect x="1150.2" y="1235.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1153.2" y="1246.0"></text>
</g>
<g>
<title>outStream_sendCommand (1 samples, 0.20%)</title><rect x="1152.5" y="1315.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1155.5" y="1326.0"></text>
</g>
<g>
<title>transport_sendPacket (1 samples, 0.20%)</title><rect x="1152.5" y="1299.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1155.5" y="1310.0"></text>
</g>
<g>
<title>socketTransport_writePacket (1 samples, 0.20%)</title><rect x="1152.5" y="1283.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1155.5" y="1294.0"></text>
</g>
<g>
<title>send_fully (1 samples, 0.20%)</title><rect x="1152.5" y="1267.0" width="2.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1155.5" y="1278.0"></text>
</g>
<g>
<title>sendto (1 samples, 0.20%)</title><rect x="1152.5" y="1251.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1155.5" y="1262.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.40%)</title><rect x="1154.9" y="1347.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.9" y="1358.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.40%)</title><rect x="1154.9" y="1331.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.9" y="1342.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.40%)</title><rect x="1154.9" y="1315.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.9" y="1326.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (2 samples, 0.40%)</title><rect x="1154.9" y="1299.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.9" y="1310.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (2 samples, 0.40%)</title><rect x="1154.9" y="1283.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.9" y="1294.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.20%)</title><rect x="1157.2" y="1267.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.2" y="1278.0"></text>
</g>
<g>
<title>DebugInfoReadStream::read_method() (1 samples, 0.20%)</title><rect x="1157.2" y="1251.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.2" y="1262.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.20%)</title><rect x="1157.2" y="1235.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="1246.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.60%)</title><rect x="1159.6" y="1379.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.6" y="1390.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.60%)</title><rect x="1159.6" y="1363.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="1374.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.40%)</title><rect x="1159.6" y="1347.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.6" y="1358.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.40%)</title><rect x="1159.6" y="1331.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.6" y="1342.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.40%)</title><rect x="1159.6" y="1315.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.6" y="1326.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.40%)</title><rect x="1159.6" y="1299.0" width="4.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1162.6" y="1310.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.20%)</title><rect x="1164.2" y="1347.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.2" y="1358.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.20%)</title><rect x="1164.2" y="1331.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.2" y="1342.0"></text>
</g>
<g>
<title>InlineCacheBuffer::update_inline_caches() (1 samples, 0.20%)</title><rect x="1164.2" y="1315.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.2" y="1326.0"></text>
</g>
<g>
<title>StubQueue::remove_first(int) (1 samples, 0.20%)</title><rect x="1164.2" y="1299.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.2" y="1310.0"></text>
</g>
<g>
<title>StubQueue::remove_first() (1 samples, 0.20%)</title><rect x="1164.2" y="1283.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.2" y="1294.0"></text>
</g>
<g>
<title>ICStub::finalize() (1 samples, 0.20%)</title><rect x="1164.2" y="1267.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.2" y="1278.0"></text>
</g>
<g>
<title>CompiledIC::is_icholder_entry(unsigned char*) (1 samples, 0.20%)</title><rect x="1164.2" y="1251.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.2" y="1262.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.20%)</title><rect x="1164.2" y="1235.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.2" y="1246.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.20%)</title><rect x="1164.2" y="1219.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.2" y="1230.0"></text>
</g>
<g>
<title>WatcherThread::run() (10 samples, 1.98%)</title><rect x="1166.6" y="1379.0" width="23.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="1390.0">W..</text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.40%)</title><rect x="1166.6" y="1363.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.6" y="1374.0"></text>
</g>
<g>
<title>ChunkPool::free_all_but(unsigned long) (1 samples, 0.20%)</title><rect x="1166.6" y="1347.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="1358.0"></text>
</g>
<g>
<title>free_small (1 samples, 0.20%)</title><rect x="1166.6" y="1331.0" width="2.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1169.6" y="1342.0"></text>
</g>
<g>
<title>small_free_detach_region (1 samples, 0.20%)</title><rect x="1166.6" y="1315.0" width="2.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1169.6" y="1326.0"></text>
</g>
<g>
<title>small_free_list_remove_ptr_no_clear (1 samples, 0.20%)</title><rect x="1166.6" y="1299.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1169.6" y="1310.0"></text>
</g>
<g>
<title>PeriodicTask::execute_if_pending(int) (1 samples, 0.20%)</title><rect x="1168.9" y="1347.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="1358.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (8 samples, 1.59%)</title><rect x="1171.3" y="1363.0" width="18.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.3" y="1374.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 1.59%)</title><rect x="1171.3" y="1347.0" width="18.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.3" y="1358.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 1.59%)</title><rect x="1171.3" y="1331.0" width="18.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.3" y="1342.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 1.59%)</title><rect x="1171.3" y="1315.0" width="18.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.3" y="1326.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.20%)</title><rect x="1171.3" y="1299.0" width="2.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1174.3" y="1310.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 1.39%)</title><rect x="1173.6" y="1299.0" width="16.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1176.6" y="1310.0"></text>
</g>
</g>
</svg>
